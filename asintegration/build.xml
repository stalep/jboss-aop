<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
]>

<!-- $Id: build.xml 62262 2007-04-11 16:33:51Z anil.saldhana@jboss.com $ -->

<!--+======================================================================+-->
<!--| JBoss (The OpenSource J2EE WebOS) Build File                         |-->
<!--|                                                                      |-->
<!--| Distributable under LGPL license.                                    |-->
<!--| See terms of license at http://www.gnu.org.                          |-->
<!--|                                                                      |-->
<!--| This file has been designed to work with the 'tools' module and      |-->
<!--| Buildmagic extentions.                                               |-->
<!--+======================================================================+-->

<project default="main" name="JBoss/AOP Application Server integration">

   <!--+====================================================================+-->
   <!--| Setup                                                              |-->
   <!--|                                                                    |-->
   <!--| Include the common build elements.                                 |-->
   <!--|                                                                    |-->
   <!--| This defines several different targets, properties and paths.      |-->
   <!--| It also sets up the basic extention tasks amoung other things.     |-->
   <!--+====================================================================+-->

   &buildmagic;

   <!-- ================================================================== -->
   <!-- Initialization                                                     -->
   <!-- ================================================================== -->

   <!--
      | Initialize the build system.  Must depend on '_buildmagic:init'.
      | Other targets should depend on 'init' or things will mysteriously fail.
    -->

   <target name="init" unless="init.disable" depends="_buildmagic:init">
   </target>


   <!--+====================================================================+-->
   <!--| Configuration                                                      |-->
   <!--|                                                                    |-->
   <!--| This target is invoked by the Buildmagic initialization logic      |-->
   <!--| and should contain module specific configuration elements.         |-->
   <!--+====================================================================+-->

   <target name="configure" unless="configure.disable">
      &libraries;
      &modules;

      <!-- Module name(s) & version -->
      <property name="aspects.title" value="JBoss Application Server integration"/>

      <property name="module.name" value="asintegration"/>
      <property name="module.Name" value="JBoss Application Server integration"/>

      <!-- Configure thirdparty libraries -->
      <path id="library.classpath">
         <path refid="apache.ant.classpath"/>
         <path refid="apache.log4j.classpath"/>
         <path refid="dom4j.dom4j.classpath"/>
		   <path refid="javassist.classpath"/>
      	<path refid="jbossas/core.libs.classpath"/>
      	<path refid="jboss/jboss.vfs.classpath"/>
      	<path refid="jboss.microcontainer.classpath"/>
         <path refid="jboss.test.classpath"/>
         <path refid="junit.junit.classpath"/>
         <path refid="oswego.concurrent.classpath"/>
      	<path refid="qdox.classpath"/>
         <path refid="trove.classpath"/>
      </path>

      <!-- Configure modules -->
      <path id="dependentmodule.classpath">
         <path refid="jboss.aop.classpath"/>
      </path>

      <!-- ===== -->
      <!-- Tasks -->
      <!-- ===== -->

      <!-- Where source files live -->
      <property name="source.java" value="${module.source}/main"/>
      <property name="source.test" value="${module.source}/test"/>
      <property name="source.etc" value="${module.source}/etc"/>
      <property name="source.resources" value="${module.source}/resources"/>
      <property name="source.bin" value="${module.source}/bin"/>

      <!-- Where build generated files will go -->
      <property name="build.reports" value="${module.output}/reports"/>
      <property name="build.gen-src" value="${module.output}/gen-src"/>
      <property name="build.classes" value="${module.output}/classes"/>
      <property name="build.classes.retro" value="${module.output}/classes-retro"/>
      <property name="build.resources" value="${module.output}/resources"/>
      <property name="build.lib" value="${module.output}/lib"/>
      <property name="build.unpacked" value="${module.output}/unpacked"/>
      <property name="build.api" value="${module.output}/api"/>
      <property name="build.etc" value="${module.output}/etc"/>
      <property name="build.todo" value="${module.output}/todo"/>
      <property name="build.meta.inf" value="${module.output}/META-INF"/>

      <!-- Install/Release structure -->
      <property name="install.id" value="${module.name}-${module.version}"/>
      <property name="release.id" value="${install.id}"/>
      <property name="install.root" value="${module.output}/${install.id}"/>

      <!-- The combined thirdparty classpath -->
      <path id="thirdparty.classpath">
         <path refid="library.classpath"/>
         <path refid="dependentmodule.classpath"/>
         <!--path refid="apache.commons.classpath"/-->
      </path>

      <!-- classpath and local.classpath must have a value using with a path -->
      <property name="classpath" value=""/>
      <property name="local.classpath" value=""/>

      <!-- The classpath required to build classes. -->
      <path id="javac.classpath">
         <path refid="jboss.aop.classpath"/>
         <pathelement path="${classpath}"/>
         <pathelement path="${local.classpath}"/>
         <path refid="thirdparty.classpath"/>
      </path>

      <path id="javac15.classpath">
         <pathelement path="${build.classes}"/>
         <path refid="javac.classpath"/>
      </path>
      <path id="jbossretro.classpath">
         <path refid="apache.ant.classpath"/>
         <path refid="javassist.classpath"/>
         <path refid="org/jboss/jboss.retro.classpath"/>
         <path refid="jboss/backport.concurrent.classpath"/>
      </path>

   </target>


   <!--+====================================================================+-->
   <!--| Compile                                                            |-->
   <!--|                                                                    |-->
   <!--| This target should depend on other compile-* targets for each      |-->
   <!--| different type of compile that needs to be performed, short of     |-->
   <!--| documentation compiles.                                            |-->
   <!--+====================================================================+-->

   <target name="compile"
      description="Compile all source files."
      depends="_default:compile-etc, _default:compile-resources, compile-classes, retrotranslate">
      <!-- Add module specific elements here. -->
   </target>

   <!-- Compile all class files -->
   <target name="compile-classes">
      <mkdir dir="${build.classes}"/>
      <javac destdir="${build.classes}"
         optimize="${javac.optimize}"
         target="${javac.target}"
         source="${javac.source}"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeAntRuntime="${javac.include.ant.runtime}"
         includeJavaRuntime="${javac.include.java.runtime}"
         includes="${javac.includes}"
         excludes="${javac.excludes}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.java}"/>
         <classpath refid="javac.classpath"/>
      </javac>
   </target>

   <target name="retrotranslate" depends="compile-classes">
      <mkdir dir="${build.classes.retro}"/>

      <taskdef name="retro" classname="org.jboss.ant.tasks.retro.Retro" classpathref="jbossretro.classpath"/>
      <retro compilerclasspathref="jbossretro.classpath" destdir="${build.classes.retro}">
         <classpath refid="jbossretro.classpath"/>
         <classpath refid="javac15.classpath"/>
         <classpath>
            <pathelement path="${build.classes}"/>
         </classpath>
         <src path="${build.classes}"/>
      </retro>
   </target>


   <!--+====================================================================+-->
   <!--| Generate Output                                                    |-->
   <!--|                                                                    |-->
   <!--| Generates the target output for this module. Target output is      |-->
   <!--| the output which is ment to be released or used by external        |-->
   <!--| modules.                                                           |-->
   <!--+====================================================================+-->

   <target name="output"
      description="Generate all target output."
      depends="_buildmagic:build-bypass-check"
      unless="build-bypass.on">

      <call target="compile"/>

      <mkdir dir="${build.lib}"/>

      <!-- Build jboss-aspect-deployer.jar for jboss 5 -->
    <!-- TODO I would like to call this  jboss-aop-deployer.jar instead, and update name in appserver trunk -->
      <jar destfile="${build.lib}/jboss-aop-deployer-jdk50.jar" manifest="${build.etc}/default.mf"
         update="${jar.update}" index="${jar.index}">
         <fileset dir="${build.classes}">
            <!-- Include everything else -->
            <include name="org/jboss/aop/deploy*/**"/>
         </fileset>
         <fileset file ="${project.root}/aop/src/etc/jbossorg-eula.txt"/>
      </jar>

      <!-- Build jboss-aop-as4deployer.jar for Jboss 4 with JDK 5 -->
   	<jar destfile="${build.lib}/jboss-aop-as4-deployer.jar" manifest="${build.etc}/default.mf"
         update="${jar.update}" index="${jar.index}">
         <fileset dir="${build.classes}">
            <!-- Include everything else -->
            <include name="org/jboss/aop/deploy*/**"/>
            <exclude name="org/jboss/aop/deployers/*.class"/>
         </fileset>
         <fileset file ="${project.root}/aop/src/etc/jbossorg-eula.txt"/>
   	</jar>
   </target>


   <target name="jars14" depends="retrotranslate, source-jar">
      <mkdir dir="${build.lib}"/>

      <!-- Build jboss-aop-as4deployer.jar for Jboss 4 with JDK 1.4 -->
      <jar destfile="${build.lib}/jboss-aop-as4-deployer-jdk14.jar" manifest="${build.etc}/default.mf"
         update="${jar.update}" index="${jar.index}">
         <fileset dir="${build.classes.retro}">
            <!-- Include everything else -->
            <include name="org/jboss/aop/deploy*/**"/>
            <exclude name="org/jboss/aop/deployers/*.class"/>
         </fileset>
         <fileset file ="${project.root}/aop/src/etc/jbossorg-eula.txt"/>
      </jar>

      <!-- Generate checksums -->
      <call target="_default:compile-checksums"/>

   </target>

   <target name="source-jar" depends="init">
      <mkdir dir="${build.lib}"/>
      <jar destfile="${build.lib}/jboss-asintegration-src.zip"
         manifest="${build.etc}/default.mf">
         <fileset dir="${source.java}">
         </fileset>
      </jar>
   </target>

   <!-- ================================================================== -->
   <!-- Cleaning                                                           -->
   <!-- ================================================================== -->

   <!-- Clean up all build output -->
   <target name="clean"
      description="Cleans up most generated files."
      depends="_buildmagic:clean">
   </target>

   <!-- Clean up all generated files -->
   <target name="clobber"
      description="Cleans up all generated files."
      depends="_buildmagic:clobber, clean">
   </target>


   <!-- ================================================================== -->
   <!-- Install & Release                                                  -->
   <!-- ================================================================== -->

   <target name="dist" depends="javadocs, init">
   </target>

   <target name="install"
      description="Install the structure for a release."
      depends="all, _buildmagic:install:default, dist"/>

   <target name="release" depends="install">
   </target>

   <target name="release-zip"
      description="Builds a ZIP distribution."
      depends="release"/>

   <target name="release-tar"
      description="Builds a TAR distribution."
      depends="release"/>

   <target name="release-tgz"
      description="Builds a TAR-GZ distribution."
      depends="release"/>

   <target name="release-all"
      description="Builds a distribution for each archive type."
      depends="release-zip, release-tgz"/>


   <!-- ================================================================== -->
   <!-- Misc.                                                              -->
   <!-- ================================================================== -->

   <target name="main"
      description="Executes the default target (most)."
      depends="most"/>

   <target name="all"
      description="Builds everything."
      depends="output, jars14, docs"/>

   <target name="most"
      description="Builds almost everything."
      depends="output, jars14"/>

   <target name="help"
      description="Show this help message."
      depends="_buildmagic:help:standard"/>

</project>
