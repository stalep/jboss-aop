<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml 56876 2006-09-15 00:11:10Z scott.stark@jboss.org $ -->

<project default="main" name="JBossAOP/Build">

  <import file="../tools/etc/ant/common-tasks.xml"/>
  
  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->
  
  <!--
     | Initialize the build system.
     | .
   -->

  <target name="init" depends="verify-environment, init-maven-parent">

    <!-- Defines repository.home -->
    <property file="local.properties"/>

    <!-- Bits for building source archives -->
    <patternset id="source.ignore">
      <exclude name="**/output/**"/>
      <exclude name="**/target/**"/>
      <exclude name="**/.svn/**" />
    </patternset>
    
    <!-- Set the version of the release here -->
    <property name="project.name" value="jboss-aop"/>
    <property name="project.version" value="${maven.project.version}"/>
    <property name="project.build.name" value="${project.name}-${project.version}"/>
    <property name="project.title" value="JBoss AOP Framework"/>

    <!-- Setup the project environment. -->
    <dirname property="project.root" file="${basedir}"/>
    <property name="project.build" value="${project.root}/build"/>
    <property name="project.tools" value="${project.root}/tools"/>
    <property name="project.thirdparty" value="${project.root}/thirdparty"/>
    <property name="project.output" value="${project.build}/output"/>
    <property name="project.release" value="${project.output}/${project.build.name}"/>

    <!-- Include user and project property overrides. -->
    <property file="${project.build}/local.properties"/>
    <property file="${user.home}/.buildmagic.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <!-- Setup the build.log -->
    <property name="buildlog.level" value="info"/>
    <record name="${basedir}/build.log" append="no" loglevel="${buildlog.level}"/>
    <property name="init-buildlog.disable" value="true"/>

    <!-- Setup the build timestamp & build identifer properties -->
    <tstamp>
      <format property="build.number" pattern="yyyyMMddHHmm"/>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <property name="build.id" value="${build.number}"/>

    <!-- Load common task properties -->
    <property file="${project.tools}/etc/ant/task.properties"/>

    <!-- Set the default maven.home directory -->
    <property name="maven.home" value="${basedir}/../tools/maven"/>

  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="release-output"
      description="Builds the default release structure."
      depends="init, most, release-no-reference-docs"
      >
  </target>

  <target name="release"
      description="Builds the default release structure."
      depends="init, clean, most, maven-site, aop.reference.docs, release-no-reference-docs, release-reference-docs"
      >

    <zip destfile="${project.release}.zip">
      <fileset dir="${project.output}">
        <include name="${project.build.name}/**"/>
      </fileset>
    </zip>
    <move file="${project.release}.zip" todir="${project.output}/lib"/>
  </target>

  <target name="release-dryrun"
      description="Builds the default release structure assuming that everything already has been built"
      depends="init, release-no-reference-docs, release-reference-docs">

  </target>

  <!-- ================================================================== -->
  <!-- Source Archives                                                    -->
  <!-- ================================================================== -->

  <target name="source-zip"
	  description="Builds a ZIP source distribution."/>

  <target name="source-tar"
	  description="Builds a TAR source distribution."/>

  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="maven-build-clean"
	  description="Cleans up most generated files.">
    <delete dir="output"/>
  </target>

  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>

  <target name="most" depends="maven-build-install"
	  description="Executes all modules and builds most everything."/>

  <target name="maven-build-install" depends="init, set-jrockit" description="Call maven install">

    <property name="build.maven.opts" value=""/>
    <property name="jrockit.build.param" value=""/>
    <echo message="jrockit: ${jrockit.build.param}"/>
    <maven basedir="${basedir}/../" options="${jrockit.build.param} ${build.maven.opts}" 
        goal="install" resultproperty="maven.install.result"/>

    <fail message="Unable to build maven modules.  See maven output for details.">
      <condition>
        <not>
          <equals arg1="${maven.install.result}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="maven-site" depends="init, set-jrockit" description="Generate the maven site">

    <property name="build.maven.opts" value=""/>
    <property name="jrockit.build.param" value=""/>
    <echo message="jrockit: ${jrockit.build.param}"/>
    <maven basedir="${basedir}/../" options="${jrockit.build.param} ${build.maven.opts}" goal="site"/>

    <fail message="Unable to complete maven build.  See maven output for details.">
      <condition>
        <not>
          <equals arg1="${maven.result}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>

  <!-- Clean the maven part of the build -->
  <target name="maven-build-clean" depends="init, set-jrockit">

    <property name="build.maven.opts" value=""/>
    <property name="jrockit.build.param" value=""/>

    <maven basedir="${basedir}/../" options="${jrockit.build.param} ${build.maven.opts}" 
        goal="clean" resultproperty="maven.clean.result"/>

    <fail message="Unable to clean maven modules.  See maven output for details.">
      <condition>
        <not>
          <equals arg1="${maven.clean.result}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="set-jrockit" depends="init" if="jrockit.home">
    <property name="jrockit.build.param" value="-Djrockit.home=${jrockit.home}"/>
  </target>

  <!-- TODO: Maybe this can be set up to control offline maven builds. -->
  <target name="check.inhibit.downloads">
    <condition property="inhibit.downloads">
      <istrue value="${nodownload}"/>
    </condition>
  </target>

  <!-- check if the the user has specied proxy settings -->
  <target name="check.proxy">
    <condition property="hasproxy">
      <and>
        <isset property="proxy.host"/>
        <isset property="proxy.port"/>
        <not>
          <equals arg1="" arg2="${proxy.host}" trim="true"/>
        </not>
        <not>
          <equals arg1="" arg2="${proxy.port}" trim="true"/>
        </not>
      </and>
    </condition>
  </target>

  <!-- set proxy settings -->
  <target name="set.proxy" if="hasproxy" depends="check.proxy">
    <echo>Proxy is set to ${proxy.host}:${proxy.port}</echo>
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
  </target>

  <target name="aop.reference.docs" depends="init" description="Builds the reference manual for JBoss AOP that should be part of ths distribution">
    <ant antfile="build.xml" dir="../aop/docs/reference"/>
  </target>


  <target name="release-no-reference-docs"
	       description="Builds the default release structure, minus the reference documentation"
        depends="init, init-maven-dist-dependencies">
    <delete dir="output/temp"/>
    <mkdir dir="output/temp"/>

    <!-- ==================================================  -->
    <!--           Add the files from 'aop'                  -->
    <!-- ==================================================  -->

    <!-- build.xml that will compile src/tests and run tests from the dist package -->
    <copy todir="${project.release}" filtering="no">
      <fileset dir="${project.root}/build/build_for_dist">
        <include name="build.xml"/>
      </fileset>
    </copy>

     <copy todir="${project.release}/etc" filtering="no">
      <fileset dir="${project.root}/aop/src/etc">
         <include name="default.mf"/> 
         <include name="jbossorg-eula.txt"/>
         <include name="pluggable-instrumentor.mf"/>
      </fileset>
      <fileset dir="${project.root}/aop/docs">
         <include name="jboss-aop_1_0.dtd"/>
         <include name="jboss-aop_2_0.xsd"/>
      </fileset>
     </copy>

    <!-- needed to build the source/tests from the dist package -->
    <copy file="${jboss:jboss-test:jar}"
           tofile="${project.release}/lib-test/jboss-test.jar"/>
    <copy file="${junit:junit:jar}"
           tofile="${project.release}/lib-test/junit.jar"/>
    <copy file="${jboss.profiler.jvmti:jboss-profiler-jvmti:jar}"
           tofile="${project.release}/lib-test/jboss-profiler-jvmti.jar"/>

    <copy todir="${project.release}/bin" filtering="no">
      <fileset dir="${project.root}/aop/src/resources/bin">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${project.release}/docs/aspect-framework" filtering="no">
      <fileset dir="${project.root}/aop/docs">
        <include name="api/**"/>
        <include name="**/*.html"/>
        <include name="**/*.pdf"/>
        <include name="**/*.jpg"/>
        <include name="**/*.pdf"/>
        <include name="**/*.css"/>
        <include name="examples/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/*.wiki"/>
        <exclude name="reference/**"/>
      </fileset>
    </copy>

    <copy todir="${project.release}/docs/aspect-framework" filtering="no">
      <fileset dir="${project.root}/aop/target/site">
        <include name="apidocs/**"/>
      </fileset>
    </copy>


    <copy todir="${project.release}/src/aspect-framework" filtering="no">
      <fileset dir="${project.root}/aop/src">
        <include name="main/**/*.java"/>
        <include name="main/**/*.jjt"/>
        <include name="test/**/*.java"/>
        <include name="resources/test/**/*.xml"/>
        <include name="resources/bin/**/*"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>

    <!-- ==================================================  -->
    <!-- Add the files from 'asintegration'                  -->
    <!-- ==================================================  -->

    <copy todir="${project.release}/docs/asintegration-core" filtering="no">
      <fileset dir="${project.root}/asintegration-core/target/site">
        <include name="apidocs/**"/>
      </fileset>
    </copy>
    <copy todir="${project.release}/docs/asintegration-jmx" filtering="no">
      <fileset dir="${project.root}/asintegration-jmx/target/site">
        <include name="apidocs/**"/>
      </fileset>
    </copy>
    <copy todir="${project.release}/docs/asintegration-mc" filtering="no">
      <fileset dir="${project.root}/asintegration-mc/target/site">
        <include name="apidocs/**"/>
      </fileset>
    </copy>

    <copy todir="${project.release}/src/asintegration-core" filtering="no">
      <fileset dir="${project.root}/asintegration-core/src">
        <include name="main/**/*.java"/>
        <include name="etc/**"/>
        <include name="resources/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>
    <copy todir="${project.release}/src/asintegration-jmx" filtering="no">
      <fileset dir="${project.root}/asintegration-jmx/src">
        <include name="main/**/*.java"/>
        <include name="etc/**"/>
        <include name="resources/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>
    <copy todir="${project.release}/src/asintegration-mc" filtering="no">
      <fileset dir="${project.root}/asintegration-mc/src">
        <include name="main/**/*.java"/>
        <include name="etc/**"/>
        <include name="resources/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>

    <!-- ==================================================  -->
    <!-- Add the files from 'aspects'                        -->
    <!-- ==================================================  -->

    <copy todir="${project.release}/docs/aspects" filtering="no">
      <fileset dir="${project.root}/aspects/target/site">
        <include name="apidocs/**"/>
      </fileset>
    </copy>

    <copy todir="${project.release}/src/aspects" filtering="no">
      <fileset dir="${project.root}/aspects/src">
        <include name="main/**/*.java"/>
        <include name="test/**/*.java"/>
        <include name="resources/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>


    <!-- ==================================================  -->
    <!-- Now pull everything together                        -->
    <!-- ==================================================  -->

    <property name="aop.50.location" value="${project.root}/aop/target/lib/jboss-aop.jar"/>
    <property name="aop.50.single.location" value="${project.root}/aop/target/lib/jboss-aop-single.jar"/>
    <property name="aop.aspect-library50.location" value="${project.root}/aspects/target/jboss-aop-aspects.jar"/>
    <property name="aop.asintegration-core.location" value="${project.root}/asintegration-core/target/jboss-aop-asintegration-core.jar"/>
    <property name="aop.asintegration-jmx.location" value="${project.root}/asintegration-jmx/target/jboss-aop-asintegration-jmx.jar"/>
    <property name="aop.asintegration-mc.location" value="${project.root}/asintegration-mc/target/jboss-aop-asintegration-mc.jar"/>
    <property name="aop.jrockit-pluggable-instrumentor.location" value="${project.root}/jrockit-pluggable-instrumentor/target/jrockit-pluggable-instrumentor.jar"/>
    <property name="aop.pluggable-instrumentor.location" value="${project.root}/pluggable-instrumentor/target/pluggable-instrumentor.jar"/>
    <property name="aop.readme-as4.location" value="${project.root}/asintegration-core/src/etc/ReadMe-AS4.txt"/>
    <property name="aop.readme-as5.location" value="${project.root}/asintegration-core/src/etc/ReadMe-AS5.txt"/>
    <property name="aop.jboss-service.location" value="${project.root}/asintegration-jmx/src/resources/META-INF/jboss-service.xml"/>

    <!-- Copy across the eula -->
    <copy todir="${project.release}" file="${project.root}/aop/src/etc/jbossorg-eula.txt"/>

    <!-- The JDK 5 libs -->
    <copy todir="${project.release}/lib" file="${aop.50.location}"/>
    <copy todir="${project.release}/lib" file="${aop.50.single.location}"/>
    <copy todir="${project.release}/lib" file="${project.root}/aop/target/lib/jboss-aop-client.jar"/>
    <copy todir="${project.release}/lib" file="${aop.aspect-library50.location}"/>
    <copy todir="${project.release}/lib" file="${aop.jrockit-pluggable-instrumentor.location}"/>
    <copy todir="${project.release}/lib" file="${aop.pluggable-instrumentor.location}"/>
    <copy tofile="${project.release}/lib/javassist.jar" file="${javassist:javassist:jar}"/>
    <copy tofile="${project.release}/lib/jboss-common-core.jar" file="${org.jboss:jboss-common-core:jar}"/>

    <copy tofile="${project.release}/lib/jboss-reflect.jar" file="${org.jboss:jboss-reflect:jar}"/>
    <copy tofile="${project.release}/lib/jboss-mdr.jar" file="${org.jboss:jboss-mdr:jar}"/>

    <copy tofile="${project.release}/lib/jboss-logging-log4j.jar" file="${org.jboss.logging:jboss-logging-log4j:jar}"/>
    <copy tofile="${project.release}/lib/jboss-logging-spi.jar" file="${org.jboss.logging:jboss-logging-spi:jar}"/>
    <copy tofile="${project.release}/lib/log4j.jar" file="${log4j:log4j:jar}"/>
    <copy tofile="${project.release}/lib/trove.jar" file="${trove:trove:jar}"/>

    <!-- The JBoss 4.0.x and 4.2.x libs for JDK 5 -->
    <copy file="${aop.jboss-service.location}" tofile="output/temp/jboss-service-jdk50.xml" filtering="true">
      <filterset>
        <filter token="SERVICE_NAME" value="org.jboss.aop.deployment.AspectManagerServiceJDK5"/>
      </filterset>
    </copy>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/build.xml" file="../asintegration-core/src/etc/jboss-40-install-jboss-aop-jdk50-build.xml"/>
    <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="../asintegration-core/src/etc/jboss.properties"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/jboss-aop-jdk50.jar" file="${aop.50.location}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/jboss-standalone-aspect-library-jdk50.jar" file="${aop.aspect-library50.location}"/>
    <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${aop.asintegration-core.location}"/>
    <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${aop.asintegration-jmx.location}"/>
    <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${aop.readme-as4.location}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/jboss-reflect.jar" file="${org.jboss:jboss-reflect:jar}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/jboss-mdr.jar" file="${org.jboss:jboss-mdr:jar}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/jboss-common-core.jar" file="${org.jboss:jboss-common-core:jar}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/javassist.jar" file="${javassist:javassist:jar}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/trove.jar" file="${trove:trove:jar}"/>
    <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/META-INF/jboss-service.xml" file="output/temp/jboss-service-jdk50.xml"/>

    <!-- The JBoss 5 libs for JDK 5 (JBoss 5 needs JDK 5) -->
    <copy todir="${project.release}/jboss-50-install/lib" file="${aop.50.location}"/>
    <copy todir="${project.release}/jboss-50-install/lib" file="${aop.asintegration-core.location}"/>
    <copy todir="${project.release}/jboss-50-install/lib" file="${aop.asintegration-mc.location}"/>
    <copy todir="${project.release}/jboss-50-install/lib" file="${aop.asintegration-jmx.location}"/>
    <copy todir="${project.release}/jboss-50-install" file="${aop.readme-as5.location}"/>
    <copy tofile="${project.release}/jboss-50-install/build.xml" file="../asintegration-core/src/etc/jboss-50-install-jboss-aop-jdk50-build.xml"/>
    <copy todir="${project.release}/jboss-50-install" file="../asintegration-core/src/etc/jboss.properties"/>
    <copy tofile="${project.release}/jboss-50-install/lib/javassist.jar" file="${javassist:javassist:jar}"/>
    <copy tofile="${project.release}/jboss-50-install/lib/trove.jar" file="${trove:trove:jar}"/>
    <copy todir="${project.release}/jboss-50-install/jboss-aop-jboss5.deployer/" file="${aop.aspect-library50.location}"/>
    <copy todir="${project.release}/jboss-50-install/jboss-aop-jboss5.deployer/" file="${aop.pluggable-instrumentor.location}"/>
    <copy todir="${project.release}/jboss-50-install/jboss-aop-jboss5.deployer/" file="${aop.jrockit-pluggable-instrumentor.location}"/>

    <!-- Copy aophelper to the dist -->
    <mkdir dir="${project.release}/aophelper"/>
    <mkdir dir="${project.release}/aophelper/resources"/>
    <mkdir dir="${project.release}/aophelper/lib"/>
    <copy todir="${project.release}/aophelper/lib" file="${project.root}/aophelper/target/aophelper.jar"/>
    <copy todir="${project.release}/aophelper/resources" file="${project.root}/aophelper/src/main/resources/jboss-aop.xml"/>
    <copy todir="${project.release}/aophelper" file="${project.root}/aophelper/bin/aophelper.sh"/>
    <copy todir="${project.release}/aophelper" file="${project.root}/aophelper/bin/aophelper.bat"/>
    <copy todir="${project.release}/aophelper" file="${project.root}/aophelper/README"/>

    <copy todir="${project.release}" file="RELEASE_NOTES.html"/>

  </target>

  <target name="release-reference-docs"
    depends="init"
    description="Builds the default release structure, minus the reference documentation">

    <copy todir="${project.release}/docs/aspect-framework" filtering="no">
      <fileset dir="${project.root}/aop/docs/reference/build">
        <include name="**"/>
      </fileset>
    </copy>

  </target>

</project>

