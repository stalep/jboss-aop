<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../thirdparty/libraries.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml 56876 2006-09-15 00:11:10Z scott.stark@jboss.org $ -->

<project default="main" name="JBossAOP/Build">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="jboss"/>
    <property name="module.Name" value="JBossMC Build"/>
    <property name="module.version" value="${version.major}.${version.minor}.${version.revision}${version.tag}"/>

    <!-- ============== -->
    <!-- Modules/Groups -->
    <!-- ============== -->

    <!-- The group to use by default -->
    <property name="groups" value="default"/>

    <!-- Sets up the module configuration. -->
    <moduleconfig property="modules" selected="${groups}">

      <!-- Modules -->
      <module name="aop"/>
      <module name="asintegration"/>

      <!-- Module groups -->

      <!--this lets you recompile a single module using a command line like
./build.sh -emacs -Dgroups=single -Dsingle-module=server
      -->
      <group name="single">
        <include modules="${single-module}"/>
      </group>

      <group name="core">
         <include modules="aop"/>
         <include modules="asintegration"/>
      </group>

      <group name="default">
        <include groups="core"/>
      </group>

      <group name="most">
        <include groups="core"/>
      </group>

    </moduleconfig>

    <!-- Show the module configuration -->
    <echo>groups:  ${groups}</echo>
    <echo>modules: ${modules}</echo>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Skip any missing modules and issue a warning -->
    <property name="executemodules.skipmissing" value="true"/>

    <!-- The header and footer displayed during each module execution -->
    <property name="executemodules.header"><![CDATA[
    ======================================================================
    ==  Executing '${target}' in module '${module}'...
    ==]]></property>

    <property name="executemodules.footer"><![CDATA[
    ==
    ==  Finished with '${target}' in module '${module}'.
    ======================================================================
    ]]></property>

    <property name="executemodules.exportproperties">
       version.major,
       version.minor,
       version.revision,
       version.tag,
       version.name,
       version.cvstag,

       specification.title,
       specification.version,
       specification.vendor,

       implementation.title,
       implementation.version,
       implementation.vendor,
       implementation.vendor.id,
       implementation.url
    </property>

    <!-- Bits for building source archives -->
    <patternset id="source.ignore">
      <exclude name="**/output/**"/>
      <exclude name="**/CVS/**" />
    </patternset>
</target>

  <!-- ================================================================== -->
  <!-- Module Pass-through Targets                                        -->
  <!-- ================================================================== -->

  <!--
     | These targets will execute all configured modules with the specified
     | target.
   -->
  <target name="modules-most" depends="_buildmagic:modules:most" />
  <target name="modules-main" depends="_buildmagic:modules:main"/>
  <target name="modules-release" depends="_buildmagic:modules:release"/>
  <target name="modules-tests" depends="_buildmagic:modules:tests"/>
  <target name="modules-clean" depends="_buildmagic:modules:clean"/>
  <target name="modules-clobber" depends="_buildmagic:modules:clobber"/>
  <target name="modules-docs" depends="_buildmagic:modules:docs"/>

  <!-- ================================================================== -->
  <!-- Module Pass-through Hooks                                          -->
  <!-- ================================================================== -->

  <!--
     | These hooks are executed after the above pass-through targets have
     | finished with a given module.
   -->

   <!-- ======== -->
   <!-- Test     -->
   <!-- ======== -->

   <target name="_module-test-most">
     <property name="_module.name" value="test" override="true"/>
     <property name="_module.output" override="true"
           value="${project.root}/${_module.name}/output"/>
   </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
	  description="Install the structure for a release."
     depends="init"
     >
  </target>

 <!-- READD THIS DEPENDENCY!!!! depends="modules-release" instead of "init" -->  
   <target name="release"
	   description="Builds the default release structure."
      depends="modules-release"  
	   >
      <delete dir="${project.release}"/>

      <delete dir="output/temp"/>  
      <mkdir dir="output/temp"/>  
  
      <!-- ==================================================  -->
      <!--           Add the files from 'aop'                  -->  
      <!-- ==================================================  -->

      <copy todir="${project.release}/bin" filtering="no">
         <fileset dir="${project.root}/aop/src/resources/bin">
            <include name="**/*"/>
         </fileset>
      </copy>

      <copy todir="${project.release}/docs/aspect-framework" filtering="no">
         <fileset dir="${project.root}/aop/docs">
            <include name="api/**"/>
            <include name="**/*.html"/>
            <include name="**/*.pdf"/>
            <include name="**/*.jpg"/>
            <include name="**/*.pdf"/>
            <include name="**/*.css"/>
            <include name="examples/**"/>
            <exclude name="**/CVS/**"/>
            <exclude name="**/.svn/**"/>
            <exclude name="**/*.wiki"/>
            <exclude name="reference/**"/>  
         </fileset>
         <fileset dir="${project.root}/aop/docs/reference/build">
            <include name="**"/>
         </fileset>
      </copy>
   
      <copy todir="${project.release}/src/aspect-framework" filtering="no">
         <fileset dir="${project.root}/aop/src">
            <include name="main/**/*.java"/>
            <include name="main/**/*.jjt"/>
            <include name="test/**/*.java"/>
            <include name="resources/test/**/*.xml"/>
            <include name="resources/bin/**/*"/>
            <exclude name="**/.svn/**"/>
            <exclude name="**/CVS/**"/>
         </fileset>
      </copy>

      <!-- ==================================================  -->
      <!-- Add the files from 'asintegration'                  -->  
      <!-- ==================================================  -->

      <copy todir="${project.release}/docs/aspect-deployer" filtering="no">
         <fileset dir="${project.root}/asintegration/output">
            <include name="api/**"/>
         </fileset>
      </copy>

      <copy todir="${project.release}/src/aspect-deployer" filtering="no">
         <fileset dir="${project.root}/asintegration/src">
            <include name="main/**/*.java"/>
            <include name="etc/**"/>
            <include name="resources/**"/>
            <exclude name="**/.svn/**"/>
            <exclude name="**/CVS/**"/>
         </fileset>
      </copy>

      <!-- ==================================================  -->
      <!-- Now pull everything together                        -->  
      <!-- ==================================================  -->

      
      &libraries;

     <!-- TODO Do I need to include ant, junit, jboss-test? -->  
            
      <property name="aop.50.location" value="${project.root}/aop/output/lib/jboss-aop-jdk50.jar"/>
      <property name="aop.14.location" value="${project.root}/aop/output/lib/jboss-aop.jar"/>
      <property name="aop.aspect-library-beans.location" value="${project.root}/asintegration/src/resources/META-INF/jboss-aspect-library-beans.xml"/>
      <property name="aop.base-aop.location" value="${project.root}/asintegration/src/etc/base-aop.xml"/>  
      <property name="aop.as4-deployer.location" value="${project.root}/asintegration/output/lib/jboss-aop-as4-deployer.jar"/>
      <property name="aop.as4-deployer-jdk14.location" value="${project.root}/asintegration/output/lib/jboss-aop-as4-deployer-jdk14.jar"/>
      <!-- TODO I would like to call this  jboss-aop-deployer.jar instead, and update name in appserver trunk -->
      <property name="aop.as5-deployer.location" value="${project.root}/asintegration/output/lib/jboss-aop-deployer-jdk50.jar"/>  
      <property name="aop.jrockit-pluggable-instrumentor.location" value="${project.root}/aop/output/lib/jrockit-pluggable-instrumentor.jar"/>  
      <property name="aop.pluggable-instrumentor.location" value="${project.root}/aop/output/lib/pluggable-instrumentor.jar"/>  
      <property name="aop.jdk14-pluggable-instrumentor.location" value="${project.root}/aop/output/lib/jdk14-pluggable-instrumentor.jar"/>  
      <property name="aop.readme-as4.location" value="${project.root}/asintegration/src/etc/ReadMe-AS4.txt"/>  
      <property name="aop.readme-as5.location" value="${project.root}/asintegration/src/etc/ReadMe-AS5.txt"/>  
      <property name="aop.jboss-service.location" value="${project.root}/asintegration/src/resources/META-INF/jboss-service.xml"/>

      <property name="javassist.location" value="${javassist.javassist.lib}/javassist.jar"/>
      <property name="jboss-backport-concurrent.location" value="${jboss/backport.concurrent.lib}/jboss-backport-concurrent.jar"/>
      <!-- TODO Need a JDK 1.4 version of common-core -->  
      <property name="jboss-common-core.location" value="${jboss/common.core.lib}/jboss-common-core.jar"/>
      <property name="jboss-logging-log4j.location" value="${jboss/common.logging.log4j.lib}/jboss-logging-log4j.jar"/>
      <property name="jboss-logging-spi.location" value="${jboss/common.logging.spi.lib}/jboss-logging-spi.jar"/>
      <property name="jbossretro.location" value="${jboss.jbossretro.lib}/jbossretro.jar"/>
      <property name="log4j.location" value="${apache.log4j.lib}/log4j.jar"/>
      <property name="qdox.location" value="${qdox.qdox.lib}/qdox.jar"/>
      <property name="trove.location" value="${trove.trove.lib}/trove.jar"/>

      <!-- TODO We used to need common-softvalue-hashmap.jar but I cannot find any occurences in the code any more -->
    
      <!-- Copy across the eula -->
      <copy todir="${project.release}" file="${project.root}/aop/src/etc/jbossorg-eula.txt"/>
      
      <!-- The JDK 5 libs -->  
      <copy todir="${project.release}/lib-50" file="${aop.50.location}"/>  
      <copy todir="${project.release}/lib-50" file="${project.root}/aop/output/lib/jboss-aop-jdk50-client.jar"/>  
      <copy todir="${project.release}/lib-50" file="${aop.jrockit-pluggable-instrumentor.location}"/>  
      <copy todir="${project.release}/lib-50" file="${aop.pluggable-instrumentor.location}"/>  
      <copy todir="${project.release}/lib-50" file="${javassist.location}"/>
      <copy todir="${project.release}/lib-50" file="${jboss-common-core.location}"/>  
      <copy todir="${project.release}/lib-50" file="${jboss-logging-log4j.location}"/>  
      <copy todir="${project.release}/lib-50" file="${jboss-logging-spi.location}"/>  
      <copy todir="${project.release}/lib-50" file="${log4j.location}"/>  
      <copy todir="${project.release}/lib-50" file="${trove.location}"/>  
  
      <!-- The JDK 1.4 libs -->  
      <copy todir="${project.release}/lib-14" file="${aop.14.location}"/>  
      <copy todir="${project.release}/lib-14" file="${aop.jdk14-pluggable-instrumentor.location}"/>  
      <copy todir="${project.release}/lib-14" file="${javassist.location}"/>
      <copy todir="${project.release}/lib-14" file="${jboss-backport-concurrent.location}"/>
      <copy todir="${project.release}/lib-14" file="${jboss-common-core.location}"/>  <!-- TODO: Needs to be JDK 1.4 version -->
      <copy todir="${project.release}/lib-14" file="${jboss-logging-log4j.location}"/>  
      <copy todir="${project.release}/lib-14" file="${jboss-logging-spi.location}"/>  
      <copy todir="${project.release}/lib-14" file="${jbossretro.location}"/>  
      <copy todir="${project.release}/lib-14" file="${log4j.location}"/>  
      <copy todir="${project.release}/lib-14" file="${qdox.location}"/>  
      <copy todir="${project.release}/lib-14" file="${trove.location}"/>  
      
      <!-- The JBoss 4.0.x libs for JDK 1.4 (JBoss 4.2.0 needs JDK 5)-->  
        
      <copy file="${aop.jboss-service.location}" tofile="output/temp/jboss-service-jdk4.xml" filtering="true">
         <filterset>
            <filter token="SERVICE_NAME" value="org.jboss.aop.deployment.AspectManagerService"/>
         </filterset>
      </copy>      
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${aop.14.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${aop.as4-deployer-jdk14.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer/" file="${aop.base-aop.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer/" file="${aop.readme-as4.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${jboss-backport-concurrent.location}"/><!-- TODO figure out for what versions of jboss this is necessary, and if it exists in other locations -->
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${javassist.location}"/>
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${jbossretro.location}"/><!-- TODO figure out for what versions of jboss this is necessary, and if it exists in other locations -->
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer" file="${trove.location}"/>  
      <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk14.deployer/META-INF/jboss-service.xml" file="output/temp/jboss-service-jdk4.xml"/>
  
      <!-- The JBoss 4.0.x and 4.2.0x libs for JDK 5 -->  
      <copy file="${aop.jboss-service.location}" tofile="output/temp/jboss-service-jdk50.xml" filtering="true">
         <filterset>
            <filter token="SERVICE_NAME" value="org.jboss.aop.deployment.AspectManagerServiceJDK5"/>
         </filterset>
      </copy>
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${project.root}/aop/output/lib/jboss-aop-jdk50.jar"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${aop.as4-deployer.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/" file="${aop.base-aop.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/" file="${aop.readme-as4.location}"/>  
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${javassist.location}"/>
      <copy todir="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer" file="${trove.location}"/>  
      <copy tofile="${project.release}/jboss-40-install/jboss-aop-jdk50.deployer/META-INF/jboss-service.xml" file="output/temp/jboss-service-jdk50.xml"/>
  
      <!-- The JBoss 5 libs for JDK 5 (JBoss 5 needs JDK 5) -->  
      <copy todir="${project.release}/jboss-50-install/lib" file="${aop.50.location}"/>  
      <copy todir="${project.release}/jboss-50-install/lib" file="${aop.as5-deployer.location}"/>  
      <copy todir="${project.release}/jboss-50-install" file="${aop.readme-as4.location}"/>  
      <copy todir="${project.release}/jboss-50-install/lib" file="${javassist.location}"/>
      <copy todir="${project.release}/jboss-50-install/lib" file="${trove.location}"/>  
      <copy tofile="${project.release}/jboss-50-install/jboss-aop-jboss5.deployer/base-aspects.xml" file="${aop.base-aop.location}"/>  
      <copy todir="${project.release}/jboss-50-install/jboss-aop-jboss5.deployer/META-INF/" file="${aop.aspect-library-beans.location}"/>  
      
   
  </target>  

  <target name="release-zip"
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>

  <!-- ================================================================== -->
  <!-- Source Archives                                                    -->
  <!-- ================================================================== -->

  <target name="source-zip"
	  description="Builds a ZIP source distribution."/>

  <target name="source-tar"
	  description="Builds a TAR source distribution."/>

  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="createthirdparty,_buildmagic:clean, modules-clean"
	  description="Cleans up most generated files.">
     <delete dir="output"/>
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" depends="_buildmagic:clobber, clean, modules-clobber"
	  description="Cleans up all generated files.">
    <delete file="${module.root}/*_run.log"/>
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>

  <target name="most" depends="createthirdparty, modules-most, install"
	  description="Executes all modules and builds most everything."/>

  <target name="help" depends="_buildmagic:help:build"
          description="Show this help message."/>
   <!-- create the thirdparty folder from items in the repository -->
   <!-- then generate a new libraries.ent file and include it in  -->
   <!-- the build                                                 -->
   <target name="createthirdparty" unless="inhibit.downloads"
      depends="check.inhibit.downloads, set.proxy">
      <ant antfile="build-thirdparty.xml" target="generate-lib-file"/>
   </target>

   <!-- check if thirdparty libraries are to be downloaded -->
   <target name="check.inhibit.downloads">
      <condition property="inhibit.downloads">
         <or>
            <uptodate property="dependencies.current"
 	      srcfile="build-thirdparty.xml"
               targetfile="../thirdparty/libraries.ent"/>
            <istrue value="${nodownload}"/>
         </or>
      </condition>
  </target>

  <!-- check if the the user has specied proxy settings -->
  <target name="check.proxy">
    <condition property="hasproxy">
        <and>
            <isset property="proxy.host"/>
            <isset property="proxy.port"/>
            <not>
                <equals arg1="" arg2="${proxy.host}" trim="true"/>
            </not>
            <not>
                <equals arg1="" arg2="${proxy.port}" trim="true"/>
            </not>
        </and>
    </condition>
  </target>

  <!-- set proxy settings -->
  <target name="set.proxy" if="hasproxy" depends="check.proxy">
    <echo>Proxy is set to ${proxy.host}:${proxy.port}</echo>
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
  </target>

</project>

