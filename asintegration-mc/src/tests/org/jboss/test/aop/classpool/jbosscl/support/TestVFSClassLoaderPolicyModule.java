/*
* JBoss, Home of Professional Open Source.
* Copyright 2006, Red Hat Middleware LLC, and individual contributors
* as indicated by the @author tags. See the copyright.txt file in the
* distribution for a full listing of individual contributors. 
*
* This is free software; you can redistribute it and/or modify it
* under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 2.1 of
* the License, or (at your option) any later version.
*
* This software is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this software; if not, write to the Free
* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
*/ 
package org.jboss.test.aop.classpool.jbosscl.support;

import java.net.URL;

import org.jboss.classloading.spi.vfs.dependency.VFSClassLoaderPolicyModule;
import org.jboss.classloading.spi.vfs.metadata.VFSClassLoaderFactory;
import org.jboss.util.id.GUID;
import org.jboss.virtual.MemoryFileFactory;
import org.jboss.virtual.VirtualFile;

/**
 * 
 * @author <a href="kabir.khan@jboss.com">Kabir Khan</a>
 * @version $Revision: 1.1 $
 */
public class TestVFSClassLoaderPolicyModule extends VFSClassLoaderPolicyModule
{
   private static final long serialVersionUID = 1;
   
   /** In AS we need a URL to create the temporary files */
   URL dynamicClassRoot;
   VirtualFile classes;

   public TestVFSClassLoaderPolicyModule(VFSClassLoaderFactory classLoadingMetaData, String contextName)
   {
      // FIXME TesetMockClassLoaderPolicyModule constructor
      super(classLoadingMetaData, contextName);
   }

   /**
    * Get/Create the vfs memory file where we will create dynamic classes
    */
   @Override
   public URL getDynamicClassRoot()
   {
      initDynamicClassRoot();
      return dynamicClassRoot;
   }
   
   /**
    * Prepend the dynamic URL location to the classpath
    */
   @Override
   protected VirtualFile[] determineVFSRoots()
   {
      initDynamicClassRoot();
      VirtualFile[] roots = super.determineVFSRoots();
      VirtualFile[] newRoots = new VirtualFile[roots.length + 1];
      newRoots[0] = classes;
      System.arraycopy(roots, 0, newRoots, 1, roots.length);
      
      return newRoots;
   }
   
   private synchronized void initDynamicClassRoot()
   {
      if (dynamicClassRoot == null)
      {
         try
         {
            dynamicClassRoot = new URL("vfsmemory", GUID.asString(), "");
            classes = MemoryFileFactory.createRoot(dynamicClassRoot).getRoot();
         }
         catch (Exception e)
         {
            // AutoGenerated
            throw new RuntimeException(e);
         }
      }
   }
}
