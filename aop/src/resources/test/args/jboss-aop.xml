<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE aop SYSTEM "jboss-aop_1_0.dtd">

<aop>
   <!-- get/setArguments test -->
   <aspect class="org.jboss.test.aop.args.ArgumentsAspect" scope="PER_VM"/>
  
   <stack name="getAndChange">
		<advice name="getArgumentsAdvice1" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
      <advice name="getAndChangeArgumentsAdvice" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
      <advice name="getArgumentsAdvice2" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>      
   </stack>
  
   <cflow-stack name="ArgumentsPOJO1_constructor">
      <called expr="org.jboss.test.aop.args.ArgumentsPOJO1->new(..)"/>
   </cflow-stack>
   
   <cflow-stack name="ArgumentsPOJO1_method">
      <called expr="* org.jboss.test.aop.args.ArgumentsPOJO1->*(..)"/>
   </cflow-stack>

   <bind pointcut="all(org.jboss.test.aop.args.ArgumentsPOJO1)">
		<stack-ref name="getAndChange"/>
   </bind>

	<bind pointcut="call(org.jboss.test.aop.args.CalledPOJO->new(int))" cflow="(ArgumentsPOJO1_constructor OR ArgumentsPOJO1_method)">
		<stack-ref name="getAndChange"/>
   </bind>

	<bind pointcut="call(* org.jboss.test.aop.args.CalledPOJO->*(int))" cflow="(ArgumentsPOJO1_constructor OR ArgumentsPOJO1_method)">
		<stack-ref name="getAndChange"/>
   </bind>

	<bind pointcut="call(static * org.jboss.test.aop.args.CalledPOJO->*(int))" cflow="(ArgumentsPOJO1_constructor OR ArgumentsPOJO1_method)">
      <advice name="setArgumentsAdvice" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
   </bind>

   <stack name="set">
      <advice name="getArgumentsAdvice1" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
      <advice name="setArgumentsAdvice" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
      <advice name="getArgumentsAdvice2" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
   </stack>
   
   <cflow-stack name="ArgumentsPOJO2_constructor">
      <called expr="org.jboss.test.aop.args.ArgumentsPOJO2->new(..)"/>
   </cflow-stack>
   
   <cflow-stack name="ArgumentsPOJO2_method">
      <called expr="* org.jboss.test.aop.args.ArgumentsPOJO2->*(..)"/>
   </cflow-stack>
   
   <bind pointcut="all(org.jboss.test.aop.args.ArgumentsPOJO2)">
      <stack-ref name="set"/>
   </bind>

   <bind pointcut="call(org.jboss.test.aop.args.CalledPOJO->new(..))" cflow="(ArgumentsPOJO2_constructor OR ArgumentsPOJO2_method)">
      <stack-ref name="set"/>
   </bind>

   <bind pointcut="call(* org.jboss.test.aop.args.CalledPOJO->*(..))" cflow="(ArgumentsPOJO2_constructor OR ArgumentsPOJO2_method)">
      <stack-ref name="set"/>
   </bind>

	<bind pointcut="call(static * org.jboss.test.aop.args.CalledPOJO->*(int))" cflow="(ArgumentsPOJO2_constructor OR ArgumentsPOJO2_method)">
      <advice name="getAndChangeArgumentsAdvice" aspect="org.jboss.test.aop.args.ArgumentsAspect"/>
   </bind>

   <!-- @Arg test -->
   <aspect class="org.jboss.test.aop.args.ArgAspect" scope="PER_VM"/>
<!--
   <bind pointcut="execution(* org.jboss.test.aop.args.POJO->bunchArgs(..))">
      <advice name="bunchArgs" aspect="org.jboss.test.aop.args.ArgAspect"/>
   </bind>

   <bind pointcut="execution(* org.jboss.test.aop.args.POJO->bunchArgsWithInvocation(..))">
      <advice name="bunchArgsWithInvocation" aspect="org.jboss.test.aop.args.ArgAspect"/>
   </bind>

   <bind pointcut="execution(* org.jboss.test.aop.args.POJO->bunchWrapped(..))">
      <advice name="wrap" aspect="org.jboss.test.aop.args.ArgAspect"/>
   </bind>
 
   <bind pointcut="execution(* org.jboss.test.aop.args.POJO->bunch(..))">
      <advice name="bunch" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="bunch1" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg1" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg2" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg3" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg4" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg15" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="arg24" aspect="org.jboss.test.aop.args.ArgAspect"/>
      <advice name="emptyArg" aspect="org.jboss.test.aop.args.ArgAspect"/>
   </bind>
    -->
   <bind pointcut="execution(java.lang.String org.jboss.test.aop.args.POJO->echo(java.lang.String))">
      <advice name="echo" aspect="org.jboss.test.aop.args.ArgAspect"/>
   </bind>

   <!-- @Invocation test -->
	<aspect class="org.jboss.test.aop.args.InvocationAspect" scope="PER_VM"/>
	
	<bind pointcut="execution(* org.jboss.test.aop.args.POJO->method1(..))">
<!--    	<before name="before" aspect="org.jboss.test.aop.args.InvocationAspect"/> -->
		<advice name="aroundMethodExecution1" aspect="org.jboss.test.aop.args.InvocationAspect"/>
<!--		<after name="after" aspect="org.jboss.test.aop.args.InvocationAspect"/> -->
<!--		<throwing name="throwing" aspect="org.jboss.test.aop.args.InvocationAspect"/> -->
   </bind>

<!--	<bind pointcut="execution(* org.jboss.test.aop.args.POJO->method2(..))">
		<advice name="aroundMethodExecution2" aspect="org.jboss.test.aop.args.InvocationAspect"/>
   </bind> -->
	
	<bind pointcut="get(* org.jboss.test.aop.args.POJO->number)">
		<advice name="aroundFieldRead" aspect="org.jboss.test.aop.args.InvocationAspect"/>
   </bind>

	<bind pointcut="set(* org.jboss.test.aop.args.POJO->number)">
		<advice name="aroundFieldWrite" aspect="org.jboss.test.aop.args.InvocationAspect"/>
   </bind>
   
   <bind pointcut="call(* org.jboss.test.aop.args.POJO->calleeMethod(..)) AND
      withincode(* org.jboss.test.aop.args.POJO->callerMethod(..))">
		<advice name="aroundMethodCalledByMethod" aspect="org.jboss.test.aop.args.InvocationAspect"/>
   </bind>
   
</aop>