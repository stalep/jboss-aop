/* Generated By:JJTree&JavaCC: Do not edit this line. TypeExpressionParserTokenManager.java */
package org.jboss.aop.pointcut.ast;
import java.lang.reflect.Modifier;

public class TypeExpressionParserTokenManager implements TypeExpressionParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x500L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x60L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x60L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(3, 5);
         break;
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x500L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(8, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(11, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x1000000010L & l) != 0L)
                     kind = 3;
                  break;
               case 3:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ff0000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 54;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ff0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 54;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000000L) != 0L)
            return 54;
         if ((active0 & 0x2ff0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 54;
         }
         return -1;
      case 3:
         if ((active0 & 0x2ff0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 54;
         }
         return -1;
      case 4:
         if ((active0 & 0x20000000L) != 0L)
            return 54;
         if ((active0 & 0x2fd0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
            return 54;
         }
         return -1;
      case 5:
         if ((active0 & 0x8d0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0x2700000000L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active0 & 0x40000000L) != 0L)
            return 54;
         if ((active0 & 0x890000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 54;
         }
         return -1;
      case 7:
         if ((active0 & 0x880000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 54;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 54;
         return -1;
      case 8:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
            return 54;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 54;
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 9;
            return 54;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
            return 54;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 49);
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 51);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         return jjMoveStringLiteralDfa1_2(0x1000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x1400000000L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x1c0000000L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0xa00000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x2000000000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0xc0000000L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x200000000L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x820000000L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000L);
      case 119:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 36, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x290000000L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000L);
      case 104:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x300000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(4, 29, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000000L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000L);
      case 119:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(5, 32, 54);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(5, 33, 54);
         return jjMoveStringLiteralDfa6_2(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(5, 34, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 37, 54);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(6, 30, 54);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa7_2(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(7, 28, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(8, 31, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
private final int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
private final int jjMoveStringLiteralDfa10_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0);
}
private final int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(11, 35, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(47);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 0:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 4);
                  }
                  if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 1:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 7:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 11:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 29:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 44:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(29, 31);
                  break;
               case 50:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 53:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 123)
                     jjAddStates(32, 33);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 10:
                  if (curChar == 125 && kind > 38)
                     kind = 38;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 16:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(17, 10);
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 125 && kind > 39)
                     kind = 39;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 35:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(36, 31);
                  break;
               case 36:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(29, 31);
                  break;
               case 48:
                  if (curChar != 93)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 51:
                  if (curChar != 93)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 25);
      case 44:
         return jjStopAtPos(0, 21);
      case 46:
         return jjMoveStringLiteralDfa1_1(0x4000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff040000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 1:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 7:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 11:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 29:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 44:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(29, 31);
                  break;
               case 50:
                  if ((0x3ff040000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 53:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 123)
                     jjAddStates(32, 33);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 10:
                  if (curChar == 125 && kind > 15)
                     kind = 15;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 16:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(17, 10);
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 125 && kind > 16)
                     kind = 16;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 35:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(36, 31);
                  break;
               case 36:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(29, 31);
                  break;
               case 48:
                  if (curChar != 93)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 51:
                  if (curChar != 93)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fc0000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            return 54;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fc0000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
            return 54;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fc0000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
            return 54;
         }
         return -1;
      case 3:
         if ((active0 & 0x7fc0000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
            return 54;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000000000000L) != 0L)
            return 54;
         if ((active0 & 0x7f40000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
            return 54;
         }
         return -1;
      case 5:
         if ((active0 & 0x2c00000000000000L) != 0L)
            return 54;
         if ((active0 & 0x5340000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
            return 54;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000000000000L) != 0L)
            return 54;
         if ((active0 & 0x5240000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
            return 54;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000000000L) != 0L)
            return 54;
         if ((active0 & 0x5200000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
            return 54;
         }
         return -1;
      case 8:
         if ((active0 & 0x1200000000000000L) != 0L)
            return 54;
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
            return 54;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 9;
            return 54;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
            return 54;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 73);
      case 41:
         return jjStopAtPos(0, 74);
      case 45:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x40000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x80000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x2000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x700000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x4800000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x1000000000000000L, 0x0L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x1300000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x1800000000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_3(active0, 0x400000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x100000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x4080000000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active0, 0x1000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0xa40000000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_3(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_3(active0, 0x200000000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0xc00000000000000L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 55, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x40000000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_3(active0, 0x40000000000000L);
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 58, 54);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 59, 54);
         return jjMoveStringLiteralDfa6_3(active0, 0x200000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 61, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_3(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_3(active0, 0x40000000000000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 56, 54);
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0x4000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_3(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_3(active0, 0x200000000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_3(active0, 0x5000000000000000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 54, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 57, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0x4000000000000000L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 60, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa10_3(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_3(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(11, 62, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, active0, 0L);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(47);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 0:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAddStates(0, 4);
                  }
                  if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 1:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 36)
                     jjAddStates(5, 6);
                  break;
               case 7:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 11:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 29:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 44:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(29, 31);
                  break;
               case 50:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 53:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 123)
                     jjAddStates(32, 33);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 10:
                  if (curChar == 125 && kind > 63)
                     kind = 63;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 16:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(17, 10);
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 125 && kind > 64)
                     kind = 64;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 35:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(36, 31);
                  break;
               case 36:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAddStates(0, 4);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(29, 31);
                  break;
               case 48:
                  if (curChar != 93)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 51:
                  if (curChar != 93)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 46, 50, 52, 53, 27, 43, 7, 8, 10, 8, 9, 10, 12, 13, 14, 
   10, 14, 15, 17, 10, 30, 32, 33, 31, 33, 34, 36, 31, 46, 47, 49, 
   6, 11, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\150\141\163\50", 
"\150\141\163\146\151\145\154\144\50", "\146\151\145\154\144\50", "\143\154\141\163\163\50", 
"\155\145\164\150\157\144\50", "\143\157\156\163\164\162\165\143\164\157\162\50", "\41", null, null, 
"\56\56", null, null, null, null, null, null, "\54", null, null, null, "\51", null, null, 
"\141\142\163\164\162\141\143\164", "\146\151\156\141\154", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\163\164\141\164\151\143", 
"\156\141\164\151\166\145", "\163\171\156\143\150\162\157\156\151\172\145\144", "\156\145\167", 
"\164\150\162\157\167\163", null, null, null, null, null, null, null, null, "\54", null, "\55\76", "\41", 
"\50", "\51", null, null, "\141\142\163\164\162\141\143\164", "\146\151\156\141\154", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\163\164\141\164\151\143", "\164\162\141\156\163\151\145\156\164", "\156\141\164\151\166\145", 
"\163\171\156\143\150\162\157\156\151\172\145\144", null, null, null, null, null, null, null, null, null, "\55\76", "\41", "\51", 
"\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PARAMS", 
   "BEHAVIOR", 
   "FIELD_DECLARATION", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 3, 3, 3, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xffcf4ffff23fcff9L, 0x1f1fL, 
};
static final long[] jjtoSkip = {
   0x3000000c003006L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[54];
private final int[] jjstateSet = new int[108];
protected char curChar;
public TypeExpressionParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TypeExpressionParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 54; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
