/* Generated By:JJTree&JavaCC: Do not edit this line. PointcutExpressionParserTokenManager.java */
package org.jboss.aop.pointcut.ast;

@SuppressWarnings({"unused"})
public class PointcutExpressionParserTokenManager implements PointcutExpressionParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 16;
            return 1;
         }
         if ((active0 & 0xffa0L) != 0L)
         {
            jjmatchedKind = 16;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xffe0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0xffe0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0xe5a0L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active0 & 0xe580L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0xc580L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0x8580L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      case 7:
         if ((active0 & 0x8580L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 7;
            return 10;
         }
         return -1;
      case 8:
         if ((active0 & 0x8180L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 8;
            return 10;
         }
         return -1;
      case 9:
         if ((active0 & 0x8100L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
            return 10;
         }
         return -1;
      case 10:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 10;
            return 10;
         }
         return -1;
      case 11:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 11;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 20);
      case 40:
         return jjStopAtPos(0, 88);
      case 41:
         return jjStopAtPos(0, 89);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x120L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x600L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x620L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x60L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xd800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(4, 5);
         break;
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc400L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8080L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(12, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(9);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(9);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x1000000010L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fe000000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 102;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fe000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 102;
         }
         return -1;
      case 2:
         if ((active0 & 0x200000000000L) != 0L)
            return 102;
         if ((active0 & 0x5fe000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
            return 102;
         }
         return -1;
      case 3:
         if ((active0 & 0x5fe000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 102;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000000L) != 0L)
            return 102;
         if ((active0 & 0x5fa000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 102;
         }
         return -1;
      case 5:
         if ((active0 & 0x11a000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 102;
         }
         if ((active0 & 0x4e0000000000L) != 0L)
            return 102;
         return -1;
      case 6:
         if ((active0 & 0x8000000000L) != 0L)
            return 102;
         if ((active0 & 0x112000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 102;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L)
            return 102;
         if ((active0 & 0x110000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 102;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000000000L) != 0L)
            return 102;
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 102;
         }
         return -1;
      case 9:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 9;
            return 102;
         }
         return -1;
      case 10:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 10;
            return 102;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 61);
      case 40:
         return jjStopAtPos(0, 62);
      case 41:
         return jjStopAtPos(0, 63);
      case 44:
         return jjStopAtPos(0, 51);
      case 45:
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x2000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x280000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x38000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x140000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x400000000000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x18000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x104000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000L);
      case 119:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 45, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x52000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x60000000000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 38, 102);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000L);
      case 99:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 41, 102);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 42, 102);
         return jjMoveStringLiteralDfa6_2(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 43, 102);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 46, 102);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 39, 102);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 37, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 40, 102);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(11, 44, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0, 0L);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 102;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(3, 9);
                  }
                  if (curChar == 36)
                     jjAddStates(10, 13);
                  break;
               case 102:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(101);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(96, 97);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 100);
                  else if (curChar == 46)
                     jjCheckNAdd(91);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 1:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 36)
                     jjAddStates(10, 13);
                  break;
               case 7:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 11:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 12:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 42:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 46:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 47:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 45);
                  break;
               case 48:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 65:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 66:
                  if (curChar == 46)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 69:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 70:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 68);
                  break;
               case 71:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 88:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(3, 9);
                  break;
               case 89:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar == 46)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(62, 64);
                  break;
               case 94:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 95:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 96:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 95);
                  break;
               case 97:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 98:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 100);
                  break;
               case 101:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(101);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(3, 9);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(101);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(98, 100);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 123)
                     jjAddStates(65, 66);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 10:
                  if (curChar == 125 && kind > 47)
                     kind = 47;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 16:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(17, 10);
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 123)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 32:
                  if (curChar == 125 && kind > 48)
                     kind = 48;
                  break;
               case 33:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 123)
                     jjAddStates(67, 68);
                  break;
               case 41:
                  if (curChar == 64)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 45:
                  if (curChar == 125 && kind > 54)
                     kind = 54;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(47, 45);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 51:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(52, 45);
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 54:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 123)
                     jjAddStates(69, 70);
                  break;
               case 64:
                  if (curChar == 64)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 68:
                  if (curChar == 125 && kind > 55)
                     kind = 55;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(70, 68);
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 74:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(75, 68);
                  break;
               case 75:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(3, 9);
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(62, 64);
                  break;
               case 92:
                  if (curChar != 93)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(93);
                  break;
               case 93:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(96, 95);
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(98, 100);
                  break;
               case 99:
                  if (curChar != 93)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(100);
                  break;
               case 100:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(101);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 102 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 34);
      case 44:
         return jjStopAtPos(0, 30);
      case 46:
         return jjMoveStringLiteralDfa1_1(0x800000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(71, 75);
                  }
                  if (curChar == 36)
                     jjAddStates(76, 77);
                  break;
               case 1:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(71, 75);
                  break;
               case 5:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 12);
                  break;
               case 13:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 36)
                     jjAddStates(76, 77);
                  break;
               case 17:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(78, 80);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 21:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(84, 87);
                  break;
               case 22:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 40:
                  if (curChar == 46)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(71, 75);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(71, 75);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar != 93)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 12);
                  break;
               case 11:
                  if (curChar != 93)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 123)
                     jjAddStates(98, 99);
                  break;
               case 16:
                  if (curChar == 64)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(78, 80);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 20:
                  if (curChar == 125 && kind > 27)
                     kind = 27;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(84, 87);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 26:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(27, 20);
                  break;
               case 27:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 123)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 42:
                  if (curChar == 125 && kind > 28)
                     kind = 28;
                  break;
               case 43:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x7fcL) != 0L)
         {
            jjmatchedKind = 81;
            return 54;
         }
         return -1;
      case 1:
         if ((active1 & 0x7fcL) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
            return 54;
         }
         return -1;
      case 2:
         if ((active1 & 0x7fcL) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 54;
         }
         return -1;
      case 3:
         if ((active1 & 0x7fcL) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
            return 54;
         }
         return -1;
      case 4:
         if ((active1 & 0x7f4L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 54;
         }
         if ((active1 & 0x8L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active1 & 0x534L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active1 & 0x2c0L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active1 & 0x10L) != 0L)
            return 54;
         if ((active1 & 0x524L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 54;
         }
         return -1;
      case 7:
         if ((active1 & 0x520L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 7;
            return 54;
         }
         if ((active1 & 0x4L) != 0L)
            return 54;
         return -1;
      case 8:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 8;
            return 54;
         }
         if ((active1 & 0x120L) != 0L)
            return 54;
         return -1;
      case 9:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
            return 54;
         }
         return -1;
      case 10:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 10;
            return 54;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 45:
         return jjMoveStringLiteralDfa1_3(0x200000L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x4L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x8L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x200L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x70L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x480L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x100L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active1, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa2_3(active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active1, 0x130L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active1, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_3(active1, 0x180L);
      case 98:
         return jjMoveStringLiteralDfa3_3(active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active1, 0x408L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active1, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa3_3(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private final int jjMoveStringLiteralDfa3_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(1, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa4_3(active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active1, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active1, 0xa4L);
      case 118:
         return jjMoveStringLiteralDfa4_3(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, active1);
}
private final int jjMoveStringLiteralDfa4_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(2, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa5_3(active1, 0x20L);
      case 104:
         return jjMoveStringLiteralDfa5_3(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active1, 0xc0L);
      case 108:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(4, 67, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_3(active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa5_3(active1, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa5_3(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, active1);
}
private final int jjMoveStringLiteralDfa5_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(3, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_3(active1, 0x4L);
      case 99:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_3(5, 70, 54);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(5, 71, 54);
         return jjMoveStringLiteralDfa6_3(active1, 0x20L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(5, 73, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active1, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa6_3(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, active1);
}
private final int jjMoveStringLiteralDfa6_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(4, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_3(active1, 0x4L);
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_3(6, 68, 54);
         return jjMoveStringLiteralDfa7_3(active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_3(active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa7_3(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, active1);
}
private final int jjMoveStringLiteralDfa7_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(5, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_3(active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa8_3(active1, 0x500L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_3(7, 66, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, active1);
}
private final int jjMoveStringLiteralDfa8_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_3(8, 69, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_3(active1, 0x400L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(8, 72, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa10_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, active1);
}
private final int jjMoveStringLiteralDfa11_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(9, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(11, 74, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, active1);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  else if (curChar == 46)
                     jjCheckNAdd(43);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 0:
                  if ((0x3ff041000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(100, 106);
                  }
                  if (curChar == 36)
                     jjAddStates(107, 108);
                  break;
               case 1:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 36)
                     jjAddStates(107, 108);
                  break;
               case 7:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 11:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 12:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 40:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(100, 106);
                  break;
               case 41:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(34, 36);
                  break;
               case 46:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 47);
                  break;
               case 49:
                  if (curChar == 46 && kind > 78)
                     kind = 78;
                  break;
               case 50:
                  if ((0x3ff041000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 53:
                  if ((0x3ff041000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(100, 106);
                  }
                  else if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 123)
                     jjAddStates(65, 66);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 10:
                  if (curChar == 125 && kind > 75)
                     kind = 75;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 16:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(17, 10);
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 123)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 32:
                  if (curChar == 125 && kind > 76)
                     kind = 76;
                  break;
               case 33:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(100, 106);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(34, 36);
                  break;
               case 44:
                  if (curChar != 93)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(45);
                  break;
               case 45:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(48, 47);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 51:
                  if (curChar != 93)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 9, 89, 90, 94, 98, 100, 101, 95, 27, 39, 62, 87, 7, 8, 
   10, 8, 9, 10, 12, 13, 14, 10, 14, 15, 17, 10, 29, 30, 32, 30, 
   31, 32, 42, 43, 45, 43, 44, 45, 47, 48, 49, 45, 49, 50, 52, 45, 
   65, 66, 68, 66, 67, 68, 70, 71, 72, 68, 72, 73, 75, 68, 90, 91, 
   93, 6, 11, 41, 46, 64, 69, 5, 6, 10, 12, 13, 37, 49, 17, 18, 
   20, 18, 19, 20, 22, 23, 24, 20, 24, 25, 27, 20, 39, 40, 42, 40, 
   41, 42, 16, 21, 41, 42, 46, 50, 52, 53, 47, 27, 39, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\141\154\154\50", "\141\154\154\50", 
"\145\170\145\143\165\164\151\157\156\50", "\143\157\156\163\164\162\165\143\164\151\157\156\50", "\150\141\163\50", 
"\150\141\163\146\151\145\154\144\50", "\147\145\164\50", "\163\145\164\50", "\146\151\145\154\144\50", 
"\167\151\164\150\151\156\50", "\167\151\164\150\151\156\143\157\144\145\50", null, null, null, null, "\41", 
null, null, "\56\56", null, null, null, null, null, null, "\54", null, null, null, 
"\51", null, null, "\141\142\163\164\162\141\143\164", "\146\151\156\141\154", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\163\164\141\164\151\143", "\156\141\164\151\166\145", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\156\145\167", "\164\150\162\157\167\163", null, null, null, null, "\54", 
null, null, null, null, null, null, null, null, "\55\76", "\41", "\50", "\51", null, 
null, "\141\142\163\164\162\141\143\164", "\146\151\156\141\154", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\163\164\141\164\151\143", "\164\162\141\156\163\151\145\156\164", "\156\141\164\151\166\145", 
"\163\171\156\143\150\162\157\156\151\172\145\144", null, null, null, null, null, null, null, null, null, null, "\55\76", "\41", 
"\51", "\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PARAMS", 
   "BEHAVIOR", 
   "FIELD_DECLARATION", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 
};
static final long[] jjtoToken = {
   0xf1ffffe47f93fff9L, 0x3e3fffcL, 
};
static final long[] jjtoSkip = {
   0x1800600006L, 0x3L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[102];
private final int[] jjstateSet = new int[204];
protected char curChar;
public PointcutExpressionParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PointcutExpressionParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 102; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
