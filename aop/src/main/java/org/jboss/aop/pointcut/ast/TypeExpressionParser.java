/* Generated By:JJTree&JavaCC: Do not edit this line. TypeExpressionParser.java */
package org.jboss.aop.pointcut.ast;

import java.lang.reflect.Modifier;

@SuppressWarnings({"unchecked", "unused"})
public class TypeExpressionParser/*@bgen(jjtree)*/implements TypeExpressionParserTreeConstants, TypeExpressionParserConstants {/*@bgen(jjtree)*/
  protected JJTTypeExpressionParserState jjtree = new JJTTypeExpressionParserState();

  final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
    if (jj_2_1(234234234)) {
      BooleanExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAS:
      case HAS_FIELD:
      case FIELD:
      case CLASS_EXPR:
      case METHOD_EXPR:
      case CONSTRUCTOR_EXPR:
        Concrete();
        break;
      case NOT:
        Not();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void BooleanExpression() throws ParseException {
                                     /*@bgen(jjtree) Boolean */
  ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(3)) {
        SubExpression();
      } else if (jj_2_3(3)) {
        CompositeExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CompositeExpression() throws ParseException {
                                         /*@bgen(jjtree) Composite */
  ASTComposite jjtn000 = new ASTComposite(JJTCOMPOSITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      SubExpression();
      jj_consume_token(78);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Not() throws ParseException {
                   /*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      if (jj_2_4(3)) {
        ConcreteExpression();
      } else if (jj_2_5(3)) {
        CompositeExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubExpression() throws ParseException {
                             /*@bgen(jjtree) Sub */
  ASTSub jjtn000 = new ASTSub(JJTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(3)) {
        Not();
      } else if (jj_2_7(3)) {
        ConcreteExpression();
      } else if (jj_2_8(3)) {
        CompositeExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          And();
          break;
        case OR:
          Or();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void And() throws ParseException {
                   /*@bgen(jjtree) And */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
      if (jj_2_9(3)) {
        ConcreteExpression();
      } else if (jj_2_10(3)) {
        CompositeExpression();
      } else if (jj_2_11(3)) {
        Not();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Or() throws ParseException {
                 /*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
      if (jj_2_12(3)) {
        ConcreteExpression();
      } else if (jj_2_13(3)) {
        CompositeExpression();
      } else if (jj_2_14(3)) {
        Not();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConcreteExpression() throws ParseException {
    Concrete();
  }

  final public void Concrete() throws ParseException {
    if (jj_2_15(4)) {
      Class();
    } else if (jj_2_16(4)) {
      MethodWrapper();
    } else if (jj_2_17(4)) {
      FieldWrapper();
    } else if (jj_2_18(4)) {
      ConstructorWrapper();
    } else if (jj_2_19(4)) {
      Has();
    } else if (jj_2_20(4)) {
      HasField();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Has() throws ParseException {
                   /*@bgen(jjtree) Has */
  ASTHas jjtn000 = new ASTHas(JJTHAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HAS);
      if (jj_2_21(4)) {
        Method();
      } else if (jj_2_22(4)) {
        Constructor();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BEHAVIOR_CLOSE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void HasField() throws ParseException {
                             /*@bgen(jjtree) HasField */
  ASTHasField jjtn000 = new ASTHasField(JJTHASFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HAS_FIELD);
      Field();
      jj_consume_token(FIELD_CLOSE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void FieldWrapper() throws ParseException {
    jj_consume_token(FIELD);
    Field();
    jj_consume_token(FIELD_CLOSE);
  }

  final public void MethodWrapper() throws ParseException {
    jj_consume_token(METHOD_EXPR);
    Method();
    jj_consume_token(BEHAVIOR_CLOSE);
  }

  final public void ConstructorWrapper() throws ParseException {
    jj_consume_token(CONSTRUCTOR_EXPR);
    Constructor();
    jj_consume_token(BEHAVIOR_CLOSE);
  }

  final public void Method() throws ParseException {
 /*@bgen(jjtree) Method */
  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token ret, clazz, body;
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case NATIVE:
        case SYNCHRONIZED:
        case BEHAVIOR_NOT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        Attribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ret = jj_consume_token(CLASS);
        break;
      case IDENTIFIER:
        ret = jj_consume_token(IDENTIFIER);
        break;
      case ANNOTATION:
        ret = jj_consume_token(ANNOTATION);
        break;
      case ARRAY_CLASS:
        ret = jj_consume_token(ARRAY_CLASS);
        break;
      case INSTANCEOF:
        ret = jj_consume_token(INSTANCEOF);
        break;
      case TYPEDEF:
        ret = jj_consume_token(TYPEDEF);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        clazz = jj_consume_token(CLASS);
        break;
      case PACKAGE:
        clazz = jj_consume_token(PACKAGE);
        break;
      case IDENTIFIER:
        clazz = jj_consume_token(IDENTIFIER);
        break;
      case ANNOTATION:
        clazz = jj_consume_token(ANNOTATION);
        break;
      case INSTANCEOF:
        clazz = jj_consume_token(INSTANCEOF);
        break;
      case TYPEDEF:
        clazz = jj_consume_token(TYPEDEF);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        body = jj_consume_token(IDENTIFIER);
        break;
      case ANNOTATION:
        body = jj_consume_token(ANNOTATION);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Parameters();
      Throws();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setReturnTypeExpression(ret.image);
    jjtn000.setClassExpression(clazz.image);
    jjtn000.setMethodExpression(body.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEHAVIOR_NOT:
        jj_consume_token(BEHAVIOR_NOT);
                    jjtn000.not=true;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.setValue(Modifier.PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                   jjtn000.setValue(Modifier.PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                         jjtc000 = false;
                                                                                                                         jjtn000.setValue(Modifier.PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                            jjtn000.setValue(Modifier.STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                jjtc000 = false;
                                                                                                                                                                                                                                jjtn000.setValue(Modifier.ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                                                                                                                                   jjtn000.setValue(Modifier.FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
                                                                                                                                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                    jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                    jjtn000.setValue(Modifier.NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                                                                                                                                                                                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                            jjtn000.setValue(Modifier.SYNCHRONIZED);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Constructor() throws ParseException {
 /*@bgen(jjtree) Constructor */
  ASTConstructor jjtn000 = new ASTConstructor(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token clazz, danew;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        ConstructorAttribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        clazz = jj_consume_token(CLASS);
        break;
      case PACKAGE:
        clazz = jj_consume_token(PACKAGE);
        break;
      case IDENTIFIER:
        clazz = jj_consume_token(IDENTIFIER);
        break;
      case ANNOTATION:
        clazz = jj_consume_token(ANNOTATION);
        break;
      case INSTANCEOF:
        clazz = jj_consume_token(INSTANCEOF);
        break;
      case TYPEDEF:
        clazz = jj_consume_token(TYPEDEF);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.setClassExpression(clazz.image);
      jj_consume_token(SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        danew = jj_consume_token(NEW);
        break;
      case ANNOTATION:
        danew = jj_consume_token(ANNOTATION);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Parameters();
      Throws();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setNewExpression(danew.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructorAttribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setValue(Modifier.PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtn000.setValue(Modifier.PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                        jjtc000 = false;
                                                                                                                        jjtn000.setValue(Modifier.PRIVATE);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Parameters() throws ParseException {
    if (jj_2_23(3)) {
      jj_consume_token(PARAMS_OPEN);
      AllParams();
      jj_consume_token(PARAMS_CLOSE);
    } else if (jj_2_24(3)) {
      jj_consume_token(PARAMS_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL_PARAMS:
      case PARAM_INSTANCEOF:
      case PARAM_TYPEDEF:
      case PARAM_CLASS:
      case PARAM_ARRAY_CLASS:
      case PARAM_ANNOTATION:
      case PARAM_IDENTIFIER:
        Parameter();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          Parameter();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(PARAMS_CLOSE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL_PARAMS:
        t = jj_consume_token(ALL_PARAMS);
        break;
      case PARAM_CLASS:
        t = jj_consume_token(PARAM_CLASS);
        break;
      case PARAM_IDENTIFIER:
        t = jj_consume_token(PARAM_IDENTIFIER);
        break;
      case PARAM_ARRAY_CLASS:
        t = jj_consume_token(PARAM_ARRAY_CLASS);
        break;
      case PARAM_ANNOTATION:
        t = jj_consume_token(PARAM_ANNOTATION);
        break;
      case PARAM_TYPEDEF:
        t = jj_consume_token(PARAM_TYPEDEF);
        break;
      case PARAM_INSTANCEOF:
        t = jj_consume_token(PARAM_INSTANCEOF);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTypeExpression(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AllParams() throws ParseException {
 /*@bgen(jjtree) AllParameter */
  ASTAllParameter jjtn000 = new ASTAllParameter(JJTALLPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ALL_PARAMS);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
  ASTField jjtn000 = new ASTField(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token type, clazz, body;
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELD_FINAL:
        case FIELD_PRIVATE:
        case FIELD_PROTECTED:
        case FIELD_PUBLIC:
        case FIELD_STATIC:
        case FIELD_TRANSIENT:
        case FIELD_NOT:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        FieldAttribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_CLASS:
        type = jj_consume_token(FIELD_CLASS);
        break;
      case FIELD_IDENTIFIER:
        type = jj_consume_token(FIELD_IDENTIFIER);
        break;
      case FIELD_ANNOTATION:
        type = jj_consume_token(FIELD_ANNOTATION);
        break;
      case FIELD_ARRAY_CLASS:
        type = jj_consume_token(FIELD_ARRAY_CLASS);
        break;
      case FIELD_INSTANCEOF:
        type = jj_consume_token(FIELD_INSTANCEOF);
        break;
      case FIELD_TYPEDEF:
        type = jj_consume_token(FIELD_TYPEDEF);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.setTypeExpression(type.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_CLASS:
        clazz = jj_consume_token(FIELD_CLASS);
        break;
      case FIELD_PACKAGE:
        clazz = jj_consume_token(FIELD_PACKAGE);
        break;
      case FIELD_IDENTIFIER:
        clazz = jj_consume_token(FIELD_IDENTIFIER);
        break;
      case FIELD_ANNOTATION:
        clazz = jj_consume_token(FIELD_ANNOTATION);
        break;
      case FIELD_INSTANCEOF:
        clazz = jj_consume_token(FIELD_INSTANCEOF);
        break;
      case FIELD_TYPEDEF:
        clazz = jj_consume_token(FIELD_TYPEDEF);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.setClassExpr(clazz.image);
      jj_consume_token(FIELD_SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_IDENTIFIER:
        body = jj_consume_token(FIELD_IDENTIFIER);
        break;
      case FIELD_ANNOTATION:
        body = jj_consume_token(FIELD_ANNOTATION);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setFieldExpr(body.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldAttribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_NOT:
        jj_consume_token(FIELD_NOT);
                 jjtn000.not = true;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_PUBLIC:
        jj_consume_token(FIELD_PUBLIC);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setValue(Modifier.PUBLIC);
        break;
      case FIELD_PROTECTED:
        jj_consume_token(FIELD_PROTECTED);
                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                               jjtc000 = false;
                                                                               jjtn000.setValue(Modifier.PROTECTED);
        break;
      case FIELD_PRIVATE:
        jj_consume_token(FIELD_PRIVATE);
                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                           jjtc000 = false;
                                                                                                                                           jjtn000.setValue(Modifier.PRIVATE);
        break;
      case FIELD_STATIC:
        jj_consume_token(FIELD_STATIC);
                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                    jjtc000 = false;
                                                                                                                                                                                                    jjtn000.setValue(Modifier.STATIC);
        break;
      case FIELD_FINAL:
        jj_consume_token(FIELD_FINAL);
                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                                                                                           jjtn000.setValue(Modifier.FINAL);
        break;
      case FIELD_TRANSIENT:
        jj_consume_token(FIELD_TRANSIENT);
                                                                                                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                                                                                                                                                                     jjtn000.setValue(Modifier.TRANSIENT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Class() throws ParseException {
 /*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token clazz;
    try {
      jj_consume_token(CLASS_EXPR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD_CLASS:
        clazz = jj_consume_token(FIELD_CLASS);
        break;
      case FIELD_PACKAGE:
        clazz = jj_consume_token(FIELD_PACKAGE);
        break;
      case FIELD_IDENTIFIER:
        clazz = jj_consume_token(FIELD_IDENTIFIER);
        break;
      case FIELD_ANNOTATION:
        clazz = jj_consume_token(FIELD_ANNOTATION);
        break;
      case FIELD_INSTANCEOF:
        clazz = jj_consume_token(FIELD_INSTANCEOF);
        break;
      case FIELD_TYPEDEF:
        clazz = jj_consume_token(FIELD_TYPEDEF);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.setClassExpr(clazz.image);
      jj_consume_token(FIELD_CLOSE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Throws() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      Exception();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPTION_SEPERATOR:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
        jj_consume_token(EXCEPTION_SEPERATOR);
        Exception();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void Exception() throws ParseException {
 /*@bgen(jjtree) Exception */
   ASTException jjtn000 = new ASTException(JJTEXCEPTION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token ex;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ex = jj_consume_token(CLASS);
        break;
      case IDENTIFIER:
        ex = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeExpression(ex.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    if (jj_3R_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(EXCEPTION_SEPERATOR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(FIELD_FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(PARAMS_OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(PARAMS_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(CLASS_EXPR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(FIELD_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(FIELD_PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(FIELD_NOT)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(FIELD_STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(FIELD_SEPARATOR)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(ALL_PARAMS)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(PARAMS_OPEN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(PARAMS_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(SEPARATOR)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    if (jj_3R_26()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(FIELD_PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(BEHAVIOR_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(SEPARATOR)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    if (jj_3R_26()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(FIELD_TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(CONSTRUCTOR_EXPR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(BEHAVIOR_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(METHOD_EXPR)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(BEHAVIOR_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(FIELD)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(FIELD_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(HAS_FIELD)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(FIELD_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(HAS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    if (jj_scan_token(BEHAVIOR_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(FIELD_PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  public TypeExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfe0,0x18,0x18,0xf0000000,0x0,0x0,0x0,0x0,0xf0000000,0xc0000000,0x0,0x0,0xc0000000,0x200000,0x1fc000,0x1fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x4000f,0x1dc0,0x1bc0,0x1800,0x40000,0xf,0x1,0x1bc0,0x810,0x1,0x0,0x0,0x0,0x3f000000,0x0,0x0,0x0,0x0,0x3f000000,0x0,0x8000,0x20,0x1100,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x77,0x6f,0x60,0x800,0x0,0x6f,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public TypeExpressionParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TypeExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TypeExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TypeExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TypeExpressionParser(TypeExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TypeExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[79];
    for (int i = 0; i < 79; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
