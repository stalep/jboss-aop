<chapter id="compiling">

   <title>Building and Compiling Aspectized Java</title>

   <sect1 id="modes" revision="1">
      <title>Instrumentation modes</title>
      <para>
         JBoss AOP works by instrumenting the classes you want to run. This means
         that modifications to the bytecode are made in order to add extra information
         to the classes to hook into the AOP library.  JBoss AOP allows for two types
         of instrumentation
         <itemizedlist>
            <listitem>
               Precompiled - The classes are instrumented in a separate aop compilation
               step before they are run.
            </listitem>
            <listitem>
               Loadtime - The classes are instrumented when they are first loaded.
            </listitem>
         </itemizedlist>
         This chapter describes the steps you need to take to precompile your classes
         with the aop precompiler.
      </para>
   </sect1>

   <sect1 id="ant" revision="1">
      <title>Ant Integration</title>
      <para>
         JBoss AOP comes with an ant task that you can use for precompiling your
         classes with the aop precompiler. An example build.xml file is the basis
         for the explanation.
      </para>
      <para>
         <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<project default="compile" name="JBoss/AOP">
   <target name="prepare">]]>
         </programlisting>
      </para>
      <para>
         Define the source directory, and the directory to compile classes to.
         <programlisting><![CDATA[
         <property name="src.dir" value="PATH TO YOUR SOURCE DIR">
         <property name="classes.dir" value="PATH TO YOUR DIR FOR COMPILED CLASSES">]]>
         </programlisting>
      </para>
      <para>
         Define also the path of your JBoss AOP installation, as well as the path to
         the lib directory:
         <programlisting><![CDATA[
          <property name="jboss.aop.root" value="PATH TO JBOSS AOP HOME"/>
          <property name="jboss.aop.lib" value="${jboss.aop.root}/lib"/>]]>
         </programlisting>
      </para>
      <para>
         Include the jboss-aop.jar and the jars it depends on in the classpath:
         <programlisting><![CDATA[
      <path id="classpath">
         <pathelement path="${jboss.aop.lib}/jboss-aop.jar"/>
         <pathelement path="${jboss.aop.lib}/javassist.jar"/>
         <pathelement path="${jboss.aop.lib}/trove.jar"/>
         <pathelement path="${jboss.aop.lib}/jboss-common-core.jar"/>
         <pathelement path="${jboss.aop.lib}/jboss-logging-spi.jar"/>
         <pathelement path="${jboss.aop.lib}/jboss-logging-log4j.jar"/>
         <pathelement path="${jboss.aop.lib}/jboss-mdr.jar"/>
         <pathelement path="${jboss.aop.lib}/jboss-reflect.jar"/>
         <pathelement path="${jboss.aop.lib}/log4j.jar"/>
      </path>]]>
         </programlisting>
      </para>
     <para>
         As an alternative, you can use the single jar provided with JBoss AOP. This
         jar bundles all the libraries used by JBoss AOP in a single unit. To use this
         jar, just define:
         <programlisting><![CDATA[
      <path id="classpath">
         <pathelement path="${jboss.aop.lib}/jboss-aop-single.jar"/>
      </path>]]>
         </programlisting>
      </para>
      <para>
         Now, define the
         <literal>org.jboss.aop.ant.AopC</literal> ant aop precompiler task:
         <programlisting><![CDATA[
      <taskdef name="aopc" classname="org.jboss.aop.ant.AopC"
         classpathref="jboss.aop.classpath"/>
      </target>]]>
         </programlisting>
      </para>
      <para>
         <programlisting><![CDATA[
   <target name="compile" depends="prepare">]]>
         </programlisting>
      </para>
      <para>
         Compile the files (from the source directory to the compiled classes directory):
         <programlisting><![CDATA[
      <javac srcdir="${src.dir}"
         destdir="${classes.dir}"
         debug="on"
         deprecation="on"
         optimize="off"
         includes="**">
         <classpath refid="classpath"/>
      </javac>]]>
         </programlisting>
      </para>
      <para>
         Now use the ant aop precompiler task, it reads the files from the classes directory and weaves those classes,
         ovewriting them with the corresponding weaved version.
         <programlisting><![CDATA[
      <aopc compilerclasspathref="classpath" verbose="true">
         <classpath path="${classes.dir}"/>
         <src path="${classes.dir}"/>
         <include name="**/*.class"/>
         <aoppath path="jboss-aop.xml"/>
         <aopclasspath path="${classes.dir}"/>
      </aopc>
   </target>
</project>]]>
         </programlisting>
      </para>
      <para>
         The last tag, <literal>aopclasspath</literal>, must be used only if you used annotations to configure aspects, bindings,
         and the like. If this is the case and you are not using a jboss-aop.xml file, you can ommit the <literal>aoppath</literal>
         tag. You can also use both annotations and XML to configure aspects. In this case, you must declare both tags.
         The complete list of the parameters that 
         <literal>org.jboss.aop.ant.AopC</literal> ant task takes follows:
      </para>

      <itemizedlist>
         <listitem>
            <literal>compilerclasspath</literal> or
            <literal>compilerclasspathref</literal> -
               These are interchangable, and represent the jars needed for the aop precompiler
               to work. The
            <literal>compilerclasspath</literal> version takes the paths of the
               jar files, and the
            <literal>compilerclasspathref</literal> version takes the
               name of a predefined ant path. They can be specified as attributes of
            <literal>aopc</literal>, as shown above.
            <literal>compilerclasspath</literal> can also be
               specified as a child element of
            <literal>aopc</literal>, in which case you can use
               all the normal ant functionality for paths (e.g. fileset).
         </listitem>
         <listitem>
            <literal>classpath</literal> or
            <literal>classpathref</literal> - Path to the
               compiled classes to be instrumented. The
            <literal>classpath</literal>
               version takes the path of the directory, and the
            <literal>classpathref</literal>
               version takes the name of a predefined ant path. They both be specified as attributes
               of
            <literal>aopc</literal>.
            <literal>classpath</literal> can also be
               specified as a child element of
            <literal>aopc</literal>, as shown above, in which case
               you can use all the normal ant functionality for paths (e.g. fileset). The full classpath
               of the underlying java process will be classpath + compilerclasspath.
         </listitem>
         <listitem>
            <literal>src</literal> - A directory containing files to be transformed. <!--Either a directory containing
               the files to be instrumented, or an ant fileset containing which files should be precompiled.
               In the example above, we specified a directory so all our classes are passed in to the
               precompiler.--> You can use multiple src elements to specify more that one root directory for transformation.
         </listitem>
         <listitem>
            <literal>include</literal> - This is optional and it serves as a filter
            to pick out which files within <literal>src</literal> should be transformed. You can use wildcards within the
            <literal>name</literal> expression, and you can also use multiple <literal>include</literal> elements.
         </listitem>
         <listitem>
            <literal>verbose</literal> - Default is false. If true, verbose output
               is generated, which comes in handy for diagnosing unexpected results.
         </listitem>
         <listitem>
            <literal>report</literal> - Default is false. If true, the classes are not
               instrumented, but a report called
            <literal>aop-report.xml</literal> is generated
               which shows all classes that have been loaded that pertain to AOP, what interceptors
               and advices that are attached, and also what metadata that has been attached. One
               particularly useful thing is the unbounded section. It specifys all bindings
               that are not bound. It allows you to debug when you might have a typo in one of your
               XML deployment descriptors.
               <para/>
               Report generation works on the instrumented classes, so to get valid data in your
               report, you have to to make two passes with <literal>aopc</literal>. First
               you run <literal>aopc</literal> with <literal>report="false"</literal> to
               instrument the classes, and then you run <literal>aopc</literal> with
               <literal>report="true"</literal> to generate the report.
         </listitem>
         <listitem>
            <literal>aoppath</literal> - The path of the
            <literal>*-aop.xml</literal> file containing
               the xml configuration of your bindings. Files or Directories can be specified.
            If it is a directory, JBoss AOP will take all
            <literal>aop.xml</literal> files from that directory.
               This gets used for the
            <literal>jboss.aop.path</literal>
               optional system property which is described in the "Command Line" section. If you have more
               than one xml file, for example if you have both a "normal"
            <literal>jboss-aop.xml</literal>
               file, and a
            <programlisting>
               &lt;aoppath&gt;
               &lt;pathelement path="jboss-aop.xml"/&gt;
               &lt;pathelement path="xmldir"/&gt;
               &lt;/aoppath&gt;
            </programlisting>
         </listitem>
         <listitem>
            <literal>aopclasspath</literal> - This should mirror your class path and contain all JARs/directories
               that may have annotated aspects (Ses Chapter "Annotated Bindings").  The AOPC compiler will browse
               each class file in this path to determine if any of them are annotationed with
            <literal>@Aspect</literal>.
               This gets used for the
            <literal>jboss.aop.class.path</literal>
               optional system property which is described in the "Command Line" section. If you have more
               than one jar file, you can specify these as follows:
            <programlisting>
               &lt;aopclasspath&gt;
               &lt;pathelement path="aspects.jar"/&gt;
               &lt;pathelement path="foo.jar"/&gt;
               &lt;/aopclasspath&gt;
            </programlisting>
         </listitem>
         <listitem>
            <literal>maxsrc</literal> - The ant task expands any directories in
               <literal>src</literal> to list all class files, when creating the parameters
               for the java command that actually performs the compilation. On some operating
               systems there is a limit to the length of vaid command lines. The default value
               for <literal>maxsrc</literal> is 1000. If the total length of all the files used
               is greater than <literal>maxsrc</literal>, a temporary file listing the files
               to be transformed is used and passed in to the java command instead. If you have
               problems running the <literal>aopc</literal> task, try setting this value to
               a value smaller than 1000.
          </listitem>
      </itemizedlist>
   </sect1>

   <sect1 id="commandline" revision="1">
      <title>Command Line</title>
      <para>
            To run the aop precompiler from the command line you need all the aop jars on your classpath, and
            the class files you are instrumenting must have everything they would need to run in the java
            classpath, including themselves, or the precompiler will not be able to run.
      </para>
      <para>
         The
         <literal>jboss.aop.path</literal> optional system property points to XML files that contain your
            pointcut, advice bindings, and metadata definitions that the precompiler will use to instrument
            the .class files. The property can have one or files it points to delimited by the operating
            systems specific classpath delimiter (';' on windows, ':' on unix).  Files or Directories can be specified.
            If it is a directory, JBoss AOP will take all
         <literal>aop.xml</literal> files from that directory.
      </para>

      <para>
         The
         <literal>jboss.aop.class.path</literal> optional system property points to all JARs or directories that
            may have classes that are annotated as
         <literal>@Aspect</literal> (See Chapter "Annotated Bindings").
            JBoss AOP will browse all classes in this path to see if they are annotated.
            The property can have one or files it points to delimited by the operating
            systems specific classpath delimiter (';' on windows, ':' on unix). 
      </para>
      <para>
            It is invoked as:
         <programlisting>
$java -classpath ... [-Djboss.aop.path=...] [-Djboss.aop.class.path=...] \
                     org.jboss.aop.standalone.Compiler &lt;class files or directories&gt;
         </programlisting>
      </para>

      <para>
         In the /bin folder of the distribution we have provided batch/script files to make
         this easier. It includes all the aop libs for you, so you just have to worry
         about your files. The usage:
         <programlisting>
$ aopc &lt;classpath&gt; [-aoppath ...] [-aopclasspath ...] [-report] [-verbose] \
      &lt;class files or directories&gt;+
         </programlisting>
      </para>
      <para>
         <itemizedlist>
            <listitem>
               <literal>classpath</literal> - path to your classes and any jars your code depends on
            </listitem>
         </itemizedlist>
         The other parameters are the same as above.
      </para>

   </sect1>


</chapter>

