<chapter id="pointcuts">

   <title>Joinpoint and Pointcut Expressions</title>
   <para>
      The pointcut language is a tool that allows joinpoint matching. A pointcut expression determines in
      which joinpoint executions of the base system an advice should be invoked.
   </para>
   <para>
      In this Chapter, we will explore the syntax of pointcut expressions.
   </para>
   <para>
      We will also see the API used to represent a matched joinpoint during advice execution,
      and how this relates to pointcut expression constructs.
   </para>

   <sect1 id="pointcuts-wilcards" revision="1">
      <title>Wildcards</title>
      <para>
         There are two types of wildcards you can use within pointcut expressions
         <itemizedlist>
            <listitem>
               <literal>*</literal>  Is a regular wildcard that matches zero or more characters.
            It can be used within any type expression, field, or method name, but not in an annotation expression
            </listitem>
            <listitem>
               <literal>..</literal>  Is used to specify any number of parameters in an constructor or method
               expression. <literal>..</literal> following a package-name is used to specify all classes from within a given 
               package ut not within sub-packages. e.g <literal>org.acme..</literal> matches 
               <literal>org.acme.Foo</literal> and <literal>org.acme.Bar</literal>, but it does not match
               <literal>org.acme.sub.SubFoo</literal>.
            </listitem>
         </itemizedlist>
      </para>
   </sect1>

   <sect1 id="pointcuts-types" revision="1">
      <title>Type Patterns</title>
      <para>
         Type patterns are defined by an annotation or by fully qualified class name.  Annotation expressions
         are not allowed to have wildcards within them, but class expressions are.
      </para>
      <itemizedlist>
         <listitem>
            <literal>org.acme.SomeClass</literal> matches that class.
         </listitem>
         <listitem>
            <literal>org.acme.*</literal> will match
            <literal>org.acme.SomeClass</literal> as well as
            <literal>org.acme.SomeClass.SomeInnerClass</literal>
         </listitem>
         <listitem>
            <literal>@javax.ejb.Entity</literal> will match any class tagged as such.
         </listitem>
         <listitem>
            <literal>String</literal> or
            <literal>Object</literal> are illegal.  You must specify the fully
            qualified name of every java class.  Even those under the
            <literal>java.lang</literal> package.
         </listitem>
      </itemizedlist>

      <para>
          To reference all subtypes of a certain class (or implementors of an interface), the
         <literal>$instanceof{}</literal> expression can be used.  Wildcards and annotations may also be used 
         within <literal>$instanceof{}</literal> expressions.
      </para>
      <programlisting>
         $instanceof{org.acme.SomeInterface}
         $instanceof{@org.acme.SomeAnnotation}
         $instanceof{org.acme.interfaces.*}
      </programlisting>
      <para>are all allowed.</para>
      <para>
         For very complex type expressions, the Typedef construct can be used.  To reference a Typedef within a class
         expression
         <literal>$typedef{id}</literal> is used.
      </para>
   </sect1>

   <sect1 id="pointcuts-method" revision="1">
      <title>Method Patterns</title>
      <programlisting>public void org.acme.SomeClass->methodName(java.lang.String)</programlisting>
      <para>
        The attributes(
         <literal>public, static, private</literal>) of the method are optional.  If the attribute
         is left out then any attribute is assumed.  Attributes accept the
         <literal>!</literal> modifier for negation.
      </para>
      <programlisting>public !static void org.acme.SomeClass->*(..)</programlisting>

      <para>
         <literal>$instanceof{}</literal> can be used in place of the class name.
      </para>
      <programlisting>void $instanceof{org.acme.SomeInterface}->methodName(java.lang.String)</programlisting>
      
      <para>
         To pick out all <literal>toString()</literal> methods of all classes within the <literal>org.acme</literal>
         package, we can use <literal>org.acme..</literal> in place of the class name.
      </para>
      <programlisting>java.lang.String org.acme..->toString()</programlisting>
      
      <para>
         To only match methods from a given interface you can use the <literal>$implements{}</literal> or 
         <literal>$implementing{}</literal> keywords in place of the method name. <literal>$implements{}</literal>
         only matches methods from the exact interface(s) given, while <literal>$implementing{}</literal>
         matches methods from the interface(s) given AND their super interfaces.
      </para>
      <programlisting>void $instanceof{org.acme.IfA}->$implements(org.acme.IfA)</programlisting>
      <programlisting>void $instanceof{org.acme.IfB}->$implementing(org.acme.IfA, org.acme.IfB)</programlisting>
      <para>
         Annotations can be used in place of the class name.  The below example matches any methodName() of a tagged
         @javax.ejb.Entity class.
      </para>
      <programlisting>void @javax.ejb.Entity->methodName(java.lang.String)</programlisting>
      <para>
         Annotations can be also be used in place of the method name.  The below examples matches any method tagged as
         @javax.ejb.Tx.
      </para>
      <programlisting>* *->@javax.ejb.Tx(..)</programlisting>
      <para>
         In addition you can use typedefs, <literal>$instanceof{}</literal>, annotations and wildcards 
         for method parameters and return types. The following matches all methods called <literal>loadEntity</literal>
         that return a class annotated with @javax.ejb.Entity, that takes a class (or a class whose superclass/interface is)
         annotated as @org.acme.Ann and any class that matches <literal>java.*.String</literal> (such as java.lang.String).
      </para>
      <programlisting>@javax.ejb.Entity *->loadEntity($instanceof{@org.acme.Ann}, java.*.String)</programlisting>
      You can also include an optional throws clause in the pointcut expression:
      <programlisting>public void org.acme.SomeClass->methodName(java.lang.String) \
      throws org.acme.SomeException, java.lang.Exception</programlisting>
      If any exceptions are present in the pointcut expression they must be present in the throws clause of the
      methods to be matched. 
   </sect1>

   <sect1 id="pointcuts-con" revision="1">
      <title>Constructor Patterns</title>
      <programlisting>public org.acme.SomeClass->new(java.lang.String)</programlisting>
      <para>
        Constructor expressions are made up of the fully qualified classname and the
         <literal>new</literal> keyword
        The attributes(
         <literal>public, static, private</literal>) of the method are optional.  If the attribute
         is left out then any attribute is assumed.  Attributes accept the
         <literal>!</literal> modifier for negation.
      </para>
      <programlisting>!public org.acme.SomeClass->new(..)</programlisting>

      <para>
         <literal>$instanceof{}</literal> can be used in the class name.
      </para>
      <programlisting>$instanceof{org.acme.SomeInterface}->new(..)</programlisting>

      <para>
         To pick out all no-args constructors of all classes within the <literal>org.acme</literal>
         package, we can use <literal>org.acme..</literal> in place of the class name.
      </para>
      <programlisting>org.acme..->new()</programlisting>     

      <para>
         Annotations can be used in place of the class name.  The below example matches any constructor of a tagged
         @javax.ejb.Entity class.
      </para>
      <programlisting>@javax.ejb.Entity->new(..)</programlisting>
      <para>
         Annotations can be also be used in place of the
         <literal>new</literal> keyword.  The below examples matches any constructor tagged as
         <literal>@javax.ejb.MethodPermission.</literal>
      </para>
      <programlisting>*->@javax.ejb.MethodPermission(..)</programlisting>

      <para>
         In addition, just as for methods you can use typedefs, <literal>$instanceof{}</literal>, 
         annotations and wildcards for constructor parameters. The following matches all constructors
         that take a class annotated as @org.acme.Ann and any class 
         that matches <literal>java.*.String</literal> (such as java.lang.String).
      </para>
      <programlisting>*->new(@org.acme.Ann, java.*.String)</programlisting>
      
      <para>You can also include an optional throws clause in the pointcut expression:</para>
      <programlisting>public void org.acme.SomeClass->new(java.lang.String) \
      throws org.acme.SomeException, java.lang.Exception</programlisting>
      <para>If any exceptions are present in the pointcut expression they must be present in the throws clause of the
      constructors to be matched.</para> 
   </sect1>

   <sect1 id="pointcuts-field" revision="1">
      <title>Field Patterns</title>
      <programlisting>public java.lang.String org.acme.SomeClass->fieldname</programlisting>
      <para>
        Constructor expressions are made up of the type, the fully qualified classname where the field resides and the
         field's name.
        The attributes(
         <literal>public, static, private</literal>) of the field are optional.  If the attribute
         is left out then any attribute is assumed.  Attributes accept the
         <literal>!</literal> modifier for negation.
      </para>
      <programlisting>!public java.lang.String org.acme.SomeClass->*</programlisting>
      <para>
         <literal>$instanceof{}</literal> can be used in the class name.  The below expression matches any field
         of any type or subtype of
         <literal>org.acme.SomeInterface</literal>
      </para>
      <programlisting>* $instanceof{org.acme.SomeInterface}->*</programlisting>
      <para>
         Annotations can be used in place of the class name.  The below example matches any field where the type class 
         is tagged with
         <literal>@javax.ejb.Entity</literal>.
      </para>
      <programlisting>* @javax.ejb.Entity->*</programlisting>
      <para>
         Annotations can be also be used in place of the field name.  The below examples matches any field tagged as
         <literal>@org.jboss.Injected.</literal>
      </para>
      <programlisting>* *->@org.jboss.Injected</programlisting>
      <para>
         In addition, you can use typedefs, <literal>$instanceof{}</literal>, annotations and wildcards for field types. 
         The following matches all fields where the type class has been tagged with @javax.ejb.Entity.
      </para>
      <programlisting>@javax.ejb.Entity *->*</programlisting>

      <para>
         To pick out all fields annotated with <literal>@org.foo.Transient</literal> within the <literal>org.acme</literal>
         package, we can use <literal>org.acme..</literal> in place of the class name, and <literal>@org.foo.Transient</literal>
         in please of the field name
      </para>
      <programlisting>* org.acme..->@org.foo.Transient</programlisting>

   </sect1>

   <sect1 id="pointcuts-pointcut" revision="1">
      <title>Pointcuts</title>
      <para>
         Pointcuts use class, field, constructor, and method expressions to specify the actual joinpoint that should
         be intercepted/watched.
      </para>
      <variablelist spacing="compact">
         <varlistentry>
            <term>
               <literal>execution(method or constructor)</literal>
            </term>
            <listitem>
               <programlisting>execution(public void Foo->method()
execution(public Foo->new())</programlisting>
               <para>
                  <literal>execution</literal> is used to specify that you want an interception to happen
                  whenever a method or constructor is called.  The the first example of matches anytime a method
                  is called, the second matches a constructor.  System classes cannot be used within
                  <literal>execution</literal>
                  expressions because it is impossible to instrument them.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>construction(constructor)</literal>
            </term>
            <listitem>
               <programlisting>construction(public Foo->new())</programlisting>
               <para>
                  <literal>construction</literal> is used to specify that you want aspects to run within the constructor.
                  The <literal>execution</literal> pointcut requires that any code that calls new() must be instrumented
                  by the compiler.  With <literal>construction</literal> the aspects are weaved right within the constructor
                  after all the code in the constructor.  The aspects are appended to the code of the constructor.  
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>get
               (field expression)</literal>
            </term>
            <listitem>
               <programlisting>get(public int Foo->fieldname)</programlisting>
               <para>
                  <literal>get</literal> is used to specify that you want an interception to happen
                  when a specific field is accessed for a read.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>set(field expression)</literal>
            </term>
            <listitem>
               <programlisting>get(public int Foo->fieldname)</programlisting>
               <para>
                  <literal>set</literal> is used to specify that you want an interception to happen
                  when a specific field is accessed for a write.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>field(field expression)</literal>
            </term>
            <listitem>
               <programlisting>field(public int Foo->fieldname)</programlisting>
               <para>
                  <literal>field</literal> is used to specify that you want an interception to happen
                  when a specific field is accessed for a read or a write.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>all(type expression)</literal>
            </term>
            <listitem>
               <programlisting>all(org.acme.SomeClass)
all(@org.jboss.security.Permission)</programlisting>
               <para>
                  <literal>all</literal> is used to specify any constructor, method or field of a particular class
                  will be intercepted.  If an annotation is used, it matches the member's annotation, not the class's
                  annotation.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>call(method or constructor)</literal>
            </term>
            <listitem>
               <programlisting>call(public void Foo->method()
call(public Foo->new())</programlisting>
               <para>
                  <literal>call</literal> is used to specify any constructor or method that you want intercepted.
                  It is different than
                  <literal>execution</literal> in that the interception happens at the caller side
                  of things and the caller information is available within the Invocation object.
                  <literal>call</literal>
                  can be used to intercept System classes because the bytecode weaving happens within the callers bytecode.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>within(type expression)</literal>
            </term>
            <listitem>
               <programlisting>within(org.acme.SomeClass)
within(@org.jboss.security.Permission)</programlisting>
               <para>
                  <literal>within</literal> matches any joinpoint (method or constructor call) within any code within a
                  particular type.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>withincode(method or constructor)</literal>
            </term>
            <listitem>
               <programlisting>withincode(public void Foo->method()
withincode(public Foo->new())</programlisting>
               <para>
                  <literal>withincode</literal> matches any joinpoint (method or constructor call) within a particular
                  method or constructor.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>has(method or constructor)</literal>
            </term>
            <listitem>
               <programlisting>has(void *->@org.jboss.security.Permission(..))
has(*->new(java.lang.String))</programlisting>
               <para>
                  <literal>has</literal> is an additional requirement for matching.  If a joinpoint is matched, its
                  class must also have a constructor or method that matches the
                  <literal>has</literal> expression.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <literal>hasfield(field expression)</literal>
            </term>
            <listitem>
               <programlisting>hasfield(* *->@org.jboss.security.Permission)
hasfield(public java.lang.String *->*)</programlisting>
               <para>
                  <literal>has</literal> is an additional requirement for matching.  If a joinpoint is matched, its
                  class must also have a field that matches the
                  <literal>hasfield</literal> expression.
               </para>
            </listitem>
         </varlistentry>
      </variablelist>

   </sect1>

   <sect1 id="pointcuts-composition" revision="1">
      <title>Pointcut Composition</title>
      <para>
         Pointcuts can be composed into boolean expressions.
         <itemizedlist>
            <listitem>
               <literal>!</literal>  logical not.
            </listitem>
            <listitem>
               <literal>AND</literal>  logical and.
            </listitem>
            <listitem>
               <literal>OR</literal>  logical or.
            </listitem>
            <listitem>
               Parathesis can be used for grouping expressions.
            </listitem>
         </itemizedlist>
      </para>
      <para>
         Here's some examples.
      </para>
      <programlisting>call(void Foo->someMethod()) AND withincode(void Bar->caller())
execution(* *->@SomeAnnotation(..)) OR field(* *->@SomeAnnotation)</programlisting>
   </sect1>

   <sect1 id="pointcuts-ref" revision="1">
      <title>Pointcut References</title>
      <para>
         Pointcuts can be named in XML or annotation bindings (See in later chapters).  They can be referenced directly
         within a pointcut expression.
      </para>
      <programlisting>some.named.pointcut OR call(void Foo->someMethod())</programlisting>
   </sect1>

   <sect1 id="pointcuts-typedef" revision="1">
      <title>Typedef Expressions</title>
      <para>
         Sometimes, when writing pointcuts, you want to specify a really complex type they may or may not
         have boolean logic associated with it.  You can group these complex type definitions into a JBoss AOP
         <literal>Typedef</literal> either in XML or as an annotation (See later in this document).  Typedef expressions
         can also be used within
         <literal>introduction</literal> expressions.

         Typedef expressions can be made up of
         <literal>has, hasfield, and class</literal> expressions.
         <literal>class</literal>
         takes a fully qualified class name, or an
         <literal>$instanceof{}</literal> expression.
      </para>
      <programlisting>class(org.pkg.*) OR has(* *->@Tx(..)) AND !class($instanceof{org.foo.Bar})</programlisting>
   </sect1>

   <sect1 id="joinpoints" revision="1">
      <title>Joinpoints</title>
      <para>
         After getting acquainted with all pointcut constructs, let's see how this reflects on the API
         available to advices during their execution.
      </para>
      
      <sect2 id="beans" revision="1">
         <title>Joinpoint Beans</title>
         <para>
            JBoss AOP provides JoinPoint Beans, so that an advice can access all information regarding a joinpoint during
            its execution. This information consists of context values, explained in the next subsection, and of reflection
            objects (<literal>java.lang.reflection</literal>). The reflection objects describe the joinpoint being intercepted 
            like a <literal>java.lang.Method</literal> for a method execution joinpoint).
         </para>
         <para>
            There are two groups of beans. The first one is the <literal>Invocation</literal> beans group. All classes of this group are
            subclasses of <literal>org.jboss.aop.joinpoint.Invocation</literal>. The <literal>Invocation</literal> class was presented in
            <xref linkend="implementing" endterm="ch02short"/> as a runtime encapsulation of a joinpoint. An <literal>Invocation</literal> object also contains
            an interceptor chain, where all advices and interceptors that intercept the joinpoint are stored. Invocation beans provide
            the <literal>invokeNext()</literal> method, responsible for proceeding execution to the next advice in the interceptor chain
            (if there is an advice that has not started execution yet) or to the joinpoint itself (if all advices contained in the interceptor
            chain have already started running). We will see more on this in the next chapter.
         </para>
         <para>
            The other group of beans contains only information regarding the joinpoint itself, and are called the <literal>
            JoinPointInfo</literal> group. All beans of this group are defined in interfaces, with <literal>
            org.jboss.joinpoint.IJoinPointInfo</literal> being their common superinterface.
         </para>
         <para>
            The <literal>Invocation</literal> objects are available only to around advices. All other types of advices can use the
            <literal>JoinPointInfo Beans</literal> to access joinpoint specific data.
         </para>
         <para>
            In both groups there is a specific type for each joinpoint type. The type of bean corresponding to each joinpoint type can be seen
            in <xref linkend="joinpointtypes"/>. All beans are in the package <literal>org.jboss.aop.joinpoint</literal>.
         </para>
         
         <table frame="topbot" id="joinpointtypes">
            <title>
              Joinpoint Types Table
            </title>
            <tgroup align="center" cols="8" rowsep="1" colsep="1">
               <colspec colname="c1" colwidth="2*"/>
               <colspec colname="c2" colwidth="2*"/>
               <colspec colname="c3" colwidth="2*"/>
               <colspec colname="c4" colwidth="2*"/>
               <colspec colname="c5" colwidth="1*"/>
               <colspec colname="c6" colwidth="1*"/>
               <colspec colname="c7" colwidth="1*"/>
               <colspec colname="c8" colwidth="1*"/>
               <spanspec spanname="thirdheader" namest="c3" nameend="c4"/>
               <spanspec spanname="fourthheader" namest="c5" nameend="c8"/>
               <thead>
                  <row>
                     <entry morerows="1">Joinpoint</entry>
                     <entry morerows="1">Pointcut Construct</entry>
                     <entry spanname="thirdheader">Bean</entry>
                     <entry spanname="fourthheader">ContextValues</entry>
                  </row>
                  <row>
                     <entry>Invocation</entry>
                     <entry>IJoinpointInfo</entry>
                     <entry>Target</entry>
                     <entry>Caller</entry>
                     <entry>Arguments</entry>
                     <entry>Return Value</entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>field read</entry>
                     <entry><literal>read</literal>, <literal>field</literal>, <literal>all</literal></entry>
                     <entry><literal>FieldReadInvocation</literal></entry>
                     <entry><literal>IFieldInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                     <entry>No</entry>
                     <entry>Yes</entry>
                  </row>
                  <row>
                     <entry>field write</entry>
                     <entry><literal>write</literal>, <literal>field</literal>, <literal>all</literal></entry>
                     <entry><literal>FieldWriteInvocation</literal></entry>
                     <entry><literal>IFieldInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                  </row>
                  <row>
                     <entry>method execution</entry>
                     <entry><literal>execution</literal>, <literal>all</literal></entry>
                     <entry><literal>MethodInvocation</literal></entry>
                     <entry><literal>IMethodInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                  </row>
                  <row>
                     <entry>constructor execution</entry>
                     <entry><literal>execution</literal></entry>
                     <entry><literal>ConstructorInvocation</literal></entry>
                     <entry><literal>IConstructorInfo</literal></entry>
                     <entry>No</entry>
                     <entry>No</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                  </row>
                  <row>
                     <entry>construction</entry>
                     <entry><literal>construction</literal></entry>
                     <entry><literal>ConstructionInvocation</literal></entry>
                     <entry><literal>IConstructorInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                     <entry>Yes</entry>
                     <entry>No</entry>
                  </row>
                  <row>
                     <entry>method call</entry>
                     <entry><literal>call</literal>, <literal>within</literal>, <literal>withincode</literal></entry>
                     <entry><literal>MethodCalledByConstructorInvocation</literal>, <literal>MethodCalledByMethodInvocation</literal></entry>
                     <entry><literal>IMethodByConInfo</literal>, <literal>IMethodByMethodInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                  </row>
                  <row>
                     <entry>constructor call</entry>
                     <entry><literal>call</literal>, <literal>within</literal>, <literal>withincode</literal></entry>
                     <entry><literal>ConstructorCalledByConstructorInvocation</literal>, <literal>ConstructorCalledByMethodInvocation</literal></entry>
                     <entry><literal>IConByConInfo</literal>, <literal>IConByMethodInfo</literal></entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                     <entry>Yes</entry>
                  </row>
               </tbody>
            </tgroup>
            The first column shows the joinpoint type. The second column shows which pointcut constructs can identify a joinpoint of that type.
            <literal>has</literal> and <literal>hasfield</literal> are additional constructs, and therefore are not shown in this table. The
            third column shows the specific type of joinpoint bean class that is used to represent that joinpoint. This column is split into two:
            one for the <literal>Invocation</literal> beans, the other one for the <literal>JoinPointInfo</literal> ones. The fourth column is
            composed of four subcolumns, and it shows the context values avaialble for each joinpoint type. Notice that, on some of these values,
            there are additional restrictions for their availability. Like, for example, there is no target on a static method execution.
         </table>
      </sect2>
   </sect1>

</chapter>

